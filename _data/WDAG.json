{"WDAG.csv":[{"venue":"WDAG","id":"95e6af1888de25fe85d1537d18365042cf67e63d","venue_1":"WDAG","year":"1995","title":"Larchant-RDOSS: a Distributed Shared Persistent Memory and its Garbage Collector","authors":"Marc Shapiro, Paulo Ferreira","author_ids":"1745429, 1709980","abstract":"Larchant-RDOSS is a distributed shared memory that persists on reliable storage across process lifetimes. Memory management is automatic: including consistent caching of data and of locks, collecting objects un-reachable from the persistent root, writing reachable objects to disk, and reducing store fragmentation. Memory management is based on a novel garbage collection algorithm, that approximates a global trace by a series of local traces, with no induced I/O or locking traffic, and no synchronization between the collector and the application processes. This results in a simple programming model, and expected minimal added application latency. The algorithm is designed for the most unfavorable environment (uncontrolled programming language, reference by pointers, distributed system, non-coherent shared memory) and should work well also in more favorable settings.","cites":"25","conferencePercentile":"88.88888889"},{"venue":"WDAG","id":"0e45ae80c8bd5f744f751d21a9aba135f748a8a3","venue_1":"WDAG","year":"1997","title":"Revisiting the Paxos Algorithm","authors":"Roberto De Prisco, Butler W. Lampson, Nancy A. Lynch","author_ids":"1679359, 2665014, 1739044","abstract":"This paper develops a new I/O automaton model called the Clock General Timed Automaton (Clock GTA) model. The Clock GTA is based on the General Timed Automaton (GTA) of Lynch and Vaan-drager. The Clock GTA provides a systematic way of describing timing-based systems in which there is a notion of \\normal\" timing behavior, but that do not necessarily always exhibit this \\normal\" behavior. It can be used for practical time performance analysis based on the stabilization of the physical system. We use the Clock GTA automaton to model, verify and analyze the paxos algorithm. The paxos algorithm is an eecient and highly fault-tolerant algorithm, devised by Lamport, for reaching consensus in a distributed system. Although it appears to be practical, it is not widely known or understood. This paper contains a new presentation of the paxos algorithm, based on a formal decomposition into several interacting components. It also contains a correctness proof and a time performance and fault-tolerance analysis.","cites":"96","conferencePercentile":"100"},{"venue":"WDAG","id":"6548797b5527052ab8aaab262239936d15b43db1","venue_1":"WDAG","year":"1994","title":"Primary Partition \"Virtually-Synchronous Communication\" harder than Consensus","authors":"André Schiper, Alain Sandoz","author_ids":"1735290, 1809233","abstract":"The paper considers the problem of implementing \\Virtu-ally Synchronous Communication\" in the primary partition of an asyn-chronous system. Virtually Synchronous Communication was rst introduced by the Isis system as a powerful mechanism for building fault-tolerant processes that mask failures by replication: it can be understood as a rule for ordering message deliveries (reliable multicasts) with respect to view changes, deened by a membership service. Primary partition Virtually Synchronous Communication, noted PP-VSC, is the problem of implementing Virtually Synchronous Communication in the case of totally ordered views. The paper formally deenes the problem, and shows that surprisingly this problem is harder than consensus: (1) consensus is solvable whenever the PP-VSC problem is solvable, however (2) there are environments where consensus is solvable, but not PP-VSC. The paper also deenes an environment in which PP-VSC can be solved. The practical consequences of the result are discussed.","cites":"26","conferencePercentile":"90"},{"venue":"WDAG","id":"2ff92a0d1d320aa90a6bb5a226807c87321b2600","venue_1":"WDAG","year":"1996","title":"How to Build a Highly Available System Using Consensus","authors":"Butler W. Lampson","author_ids":"2665014","abstract":"Lamport showed that a replicated deterministic state machine is a general way to implement a highly available system, given a consensus algorithm that the replicas can use to agree on each input. His Paxos algorithm is the most fault-tolerant way to get consensus without real-time guarantees. Because general consensus is expensive, practical systems reserve it for emergencies and use leases (locks that time out) for most of the computing. This paper explains the general scheme for efficient highly available computing, gives a general method for understanding concurrent and fault-tolerant programs, and derives the Paxos algorithm as an example of the method.","cites":"76","conferencePercentile":"100"},{"venue":"WDAG","id":"35bcac95c227cfc5eca7710ed0b15bbfceb02a6f","venue_1":"WDAG","year":"1996","title":"A Cyclic Distributed Garbage Collector for Network Objects","authors":"Helena Rodrigues, Richard E. Jones","author_ids":"2128960, 3252147","abstract":"This paper presents an algorithm for distributed garbage collection and outlines its implementation within the Network Objects system. The algorithm is based on a reference listing scheme, which i s augmented by partial tracing in order to collect distributed garbage cycles. Processes may be dynamically organised into groups, according to appropriate heuristics, to reclaim distributed garbage cycles. The algorithm places no overhead on local collectors and suspends local mutators only brieey. P artial tracing of the distributed graph involves only objects thought to be part of a garbage cycle: no collaboration with other processes is required. The algorithm ooers considerable exibility, a l l o wing expediency and fault-tolerance to be traded against completeness.","cites":"23","conferencePercentile":"90.90909091"},{"venue":"WDAG","id":"1b578b579edd5d6dcc30e8bdfe7790a7a25dff14","venue_1":"WDAG","year":"1997","title":"Genuine Atomic Multicast","authors":"Rachid Guerraoui, André Schiper","author_ids":"1727558, 1735290","abstract":"This paper addresses the problem of atomic multicasting messages in asynchronous systems with unreliable failure detection. First, we give a characterisation of the notion of algorithms tolerating unreliable failure detection. Second, we give a characterisation of the notion of genuine atomic multicast. This characterisation leads to a better understanding of the diierence between atomic multicast and atomic broadcast , and to a clear distinction between genuine atomic multicast algorithms and non-genuine atomic multicast algorithms. Third, we show that in a system with at least three processes, the genuine atomic multi-cast problem cannot be solved with unreliable failure detection, if at least one process may crash. We mention however two ways of circumventing this impossibility result.","cites":"13","conferencePercentile":"33.33333333"}]}