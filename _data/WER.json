{"WER.csv":[{"venue":"WER","id":"061ee177e740918a53e00f5784d45c2d4909e478","venue_1":"WER","year":"2009","title":"Uma Avaliação sobre Rastreabilidade de Software no Contexto do MPS.BR","authors":"Marcelio D'Oliveira Leal, Sandro Ronaldo Bezerra Oliveira, Cleidson R. B. de Souza","author_ids":"1916736, 2559268, 1809430","abstract":"The need to increase the productivity and competitiveness among software development organizations has demanded additional quality from these companies. Thus, the adoption of a processes quality model is a growing activity, mainly with the creation of the MPS.BR model, the Brazilian program for software process improvement. In this context, an activity that increases the quality and is basic is the software traceability. This paper presents an overview about the software traceability activity, one of the expected results of the requirements management in the MR-MPS.BR. Resumo A necessidade do aumento de produtividade e competitividade entre as instituições de desenvolvimento de software tem exigido cada vez mais qualidade para as mesmas. Assim, a adoção de um modelo de qualidade de processos é uma atividade que cresce, principalmente com a criação do MPS.BR, programa de melhoria de processo de software brasileiro. Neste aspecto, uma atividade que aumenta a qualidade e é fundamental para a qualidade do processo é a rastreabilidade de software. Este trabalho apresenta uma visão sobre a atividade de rastreabilidade de software, um dos resultados esperados da gerência de requisitos no MR-MPS.BR. Modelos de referência para melhoria de processos de desenvolvimento de software atuais como CMMI [28], ISO 12207 [11] e MPS.BR [29] têm destacado a importância que é a gerência dos requisitos para a qualidade do processo de software, e ultimamente para o produto final. No modelo MPS.BR, por exemplo, a gerência de requisitos é um processo fundamental, já que faz parte do nível G. A gerência de requisitos (GRE) é a área do processo que tem como objetivo controlar a criação e evolução destes requisitos [32]. De fato, o sucesso da GRE depende diretamente de quão bem definidos são os relacionamentos entre os requisitos e entre os outros conjuntos de artefatos gerados durante o processo de desenvolvimento [20]. Esta tarefa é responsabilidade da Rastreabilidade de Software (RS). A RS tem se mostrado um importante aspecto de apoio ao processo de desenvolvimento de software, além de contribuir para uma melhor qualidade do produto final [1, 21, 25, 31]. O objetivo deste trabalho é apresentar os conceitos utilizados nas abordagens atuais de rastreabilidade, apresentar a rastreabilidade no contexto do MPS.BR, fazer uma breve avaliação em relação aos conceitos atuais e propor melhorias. O restante deste trabalho está organizado como segue. Na seção 2 é apresentado o conceito de RS e conceitos relacionados. Na seção 3, é apresentado brevemente o modelo MPS.BR, …","cites":"0","conferencePercentile":"23.33333333"},{"venue":"WER","id":"a3b485c3f502da815180cc0ee29774588fa2e4bd","venue_1":"WER","year":"2002","title":"Capturing Web Application Requirements through Goal-Oriented Analysis","authors":"Davide Bolchini, Paolo Paolini","author_ids":"1780806, 1769550","abstract":"New conceptual tools for effectively supporting the activity of requirements analysis of web applications are needed. Current approaches and model in Requirements Engineering (RE) can be tailored and extended in order to cope with the following distinctive features of interactive and hypermedia-intensive web applications: a) high-level communication and business goals have to be addressed and carefully analyzed as an integral part of requirements management; b) goals and needs of the stakeholders need to be tied up with design in a coherent fashion, bridging the current gap between requirements and hypermedia specifications; c) lightweight, usable and informal models are needed for web designers and analysts with no engineering background. Starting from key achievements in RE this paper introduces a lightweight methodology blending goal-directed RE and scenario-based techniques. The core elements of the methodology will be illustrated through a real project experience.","cites":"11","conferencePercentile":"93.75"},{"venue":"WER","id":"dbfdaba5faaa5047c88f0442a936eac22853f8b0","venue_1":"WER","year":"2003","title":"Crafting Saliente WEB Scenarios using Priorities","authors":"Davide Bolchini","author_ids":"1780806","abstract":"Scenarios are effective conceptual tools for requirements elicitation, analysis, and evaluation. However, choosing salient scenarios is one of the major problems of scenario-based web design. On one hand, due to the partiality of scenarios, it is often difficult to envision up-front all the scenarios necessary to cover every interaction capability to be designed for the site. On the other hand, drastically limiting ex ante the number of scenarios may mislead the design because of the risk of missing the coverage of crucial website requirements. This paper introduces a simple technique that enables reasoning about salient scenarios on the basis of the importance of the user profiles, the main stakeholders and their goals. Users and site main stakeholders assign priorities to user profiles and user goals; scenarios are then elaborated on the basis of the profiles and goals with the highest priorities. Advantages and limits of the approach are discussed by means of examples excerpted from a case study.","cites":"1","conferencePercentile":"44.44444444"},{"venue":"WER","id":"429e8bc03d503c9e0812e24767eb4cdd7223d86e","venue_1":"WER","year":"2009","title":"Towards a requirements reuse method using Product Line in distributed environments","authors":"Thais Eblíng, Jorge Luis Nicolas Audy, Rafael Prikladnicki","author_ids":"2988397, 1763853, 1782810","abstract":"Distributed Software Development (DSD) is a recent approach where the teams are geographically distributed. Some characteristics of these environments have significant impact in activities that require constant communication, shared vision and stakeholder's cooperation, as we have in Requirements Engineering (RE). The goal of this paper is to present a requirements reuse method that integrates software reuse in the context of Product Lines (PL), to improve the RE in a DSD environment.","cites":"0","conferencePercentile":"23.33333333"},{"venue":"WER","id":"caedec4f2c7dda6b3eff8cca3eaaeeb6110217e1","venue_1":"WER","year":"2007","title":"Requirements Engineering Lessons from House Building","authors":"Daniel M. Berry","author_ids":"1684228","abstract":"Anyone who has built or remodeled a house and has developed or enhanced SW must have noticed the similarity of these activities. This talk describes some lessons about requirements engineering I learned while being a customer in a house building and two house remodeling. The biggest problem is to avoid very expensive requirements creep. The main lesson is the importance of the customer insisting on following a full requirements engineering process, including goal identification, requirements elicitation, analysis, and specification, and validation of the specification. A secondary lesson is that a customer has an important role in requirements engineering and he or she sometimes needs to learn that role.","cites":"0","conferencePercentile":"10"},{"venue":"WER","id":"2a8ddfa577d6e4b2fc6907d1b26f40503c869e37","venue_1":"WER","year":"2004","title":"Designing Communication-intensive Web Applications: a Case Study","authors":"Vito Perrone, Davide Bolchini","author_ids":"2615315, 1780806","abstract":"Who uses requirements engineering and design methodologies besides the people who invented them? Are researchers-at least-actually trying to use them in real-world complex projects and not in \"paper project\"? In this paper, we dare to recount the experience and the lessons we gained in trying to use seriously and in-depth a requirements engineering method (called AWARE) combined with a conceptual user-centered design method (called W2000) for the development of a real-world web application. The project is recounted through the process followed and the artifacts produced, as well as by crystallizing our experience in using and transferring the method to industry in practical and methodological recommendations.","cites":"1","conferencePercentile":"36.84210526"},{"venue":"WER","id":"05e6a6c15f18461ef133e0428440b8dac94c9b1e","venue_1":"WER","year":"2005","title":"Comparing Requirement Engineering Approaches for Handling Crosscutting Concerns","authors":"Ruzanna Chitchyan, Awais Rashid, Peter Sawyer","author_ids":"1951201, 1679995, 6134057","abstract":"A number of requirements engineering (RE) approaches have focused on addressing broadly scoped (non-functional) properties such as security, availability, etc. More recently, several aspect-oriented requirements engineering (AORE) approaches have been proposed to tackle both functional and non-functional requirements of a crosscutting nature. In this paper, we analyse how some well-known RE approaches address crosscutting concerns. We compare these approaches with AORE approaches in order to identify the additional contributions the latter have to offer while at the same time investigating what AORE can learn from traditional RE techniques. We use our comparison to derive a set of challenges to be addressed by AORE techniques. This paper is our position statement, rather then an attempt to precisely evaluate the discussed approaches, for which several large case studies are necessary .","cites":"3","conferencePercentile":"67.5"},{"venue":"WER","id":"a77521e1c3a2bba134713da883e2df8dad5a8f86","venue_1":"WER","year":"2009","title":"Tacit Knowledge in Requirements","authors":"Peter Sawyer","author_ids":"6134057","abstract":"The importance of tacit knowledge in requirements elicitation and understanding is widely accepted but poorly understood. There is no clear definition of tacit knowledge, with definitions spanning knowledge that cannot be articulated to knowledge that is merely unarticulated. The situation is further confused by the fact that the most widely cited author on tacit knowledge (Michael Polanyi) actually wrote about tacit knowing. As a phenomenon, tacit knowledge is regarded both as a problem and an advantage. It's a problem because if knowledge remains tacit, then it cannot be effectively communicated and codified, making the explicit knowledge that we hold incomplete. It's an advantage because if it is valuable to our company, our competitors cannot easily gain access to it. In requirements engineering, we know that we cannot make everything explicit. Much must remain implicit; we need to assume that sufficient shared understanding exists between the stakeholder and the analyst to obviate the need for complete, explicit description of all the requirements and their context. However, problems occur when this shared understanding is poor and particularly when one or both of the parties fails to understand the extent of their imperfect shared understanding. A skilled analyst will recognize the presence of tacit knowledge and use a range of techniques to expose it, or as much of it as is feasible to extract. Important information evades even skilled analysts, however, and many analysts lack the skill and experience to recognize its absence or its significance. My interest is in deepening our understanding of tacit knowledge in RE and in seeking to develop tools and techniques to mitigate its harmful effects. I and my colleagues are investigating the use of techniques from computational linguistics to define baseline knowledge and to infer the presence of tacit knowledge. The general problem is so nuanced that no complete solution is possible. However, it may be possible to draw the analyst's attention to missing or incomplete knowledge that may be rooted in stakeholders' inability, difficulty or inhibition with articulating their knowledge and from which the analyst can formulate appropriate requirements. In my talk I will briefly review the problem of tacit knowledge in RE and suggest some techniques that may contribute to exposing its presence.","cites":"0","conferencePercentile":"23.33333333"},{"venue":"WER","id":"600b6c59b3483400420faec81c1bebf46a57c110","venue_1":"WER","year":"2000","title":"From Early Requirements Modeled by the i* Technique to Later Requirements Modeled in Precise UML","authors":"Fernanda M. R. Alencar, Jaelson Brelaz de Castro, Gilberto A. Cysneiros Filho, John Mylopoulos","author_ids":"1729825, 1722915, 3232442, 1750566","abstract":"Requirements capture has been acknowledged as a critical phase of software development, precisely because it is the phase which deals not only with technical knowledge, but also with organizational, managerial, economic and social issues. The emerging consensus is that a requirement specification should include not only software specifications but also business models and other kinds of information describing the context in which the intended system will function. Unfortunately, the current dominant object oriented modeling technique, i.e. Unified Modeling Technique, is ill equipped for capturing early requirements which are typically informal and often focus on organisational objectives. UML is more suitable for later phases of requirements capture, which usually focus on completeness, consistency, and automated verification of functional requirements for the new system. In this paper, we present some guidelines for the integration of early and late requirements specifications. For the organizational modeling we use the i* technique, which focuses on the description of organizational relationships among various organizational actors, as well as an understanding of the rationale for the alternatives chosen. For the functional requirements specification, we rely on the precise Unified Mod-eling Language (pUML), annotated with constraints described in OCL. A small CD store example is used to illustrate how the requirements process iterates between the early and late requirements specification.","cites":"17","conferencePercentile":"100"},{"venue":"WER","id":"b1a1ea72a757b17cc5a9ad84c48c7a520b5b4d58","venue_1":"WER","year":"2005","title":"É possível substituir processos de Engenharia de Requisitos por Contagem de Pontos de Função?","authors":"Claudia Hazan, Daniel M. Berry, Julio Cesar Sampaio do Prado Leite","author_ids":"2457056, 1684228, 1720039","abstract":"The principal problem that affects software development projects is low quality requirements specifications. Low quality requirements specifications make it difficult to develop high quality software. We propose using the Estimated Function Point Counting (EFPC) method of software size estimation as a surrogate process for Requirements Engineering (RE) process, especially for the organizations which don't apply a RE Process. During function point counting, the counting professional can discover missing requirements, incomplete requirements, and inconsistencies in the specification of the requirements. Thus, these organizations can apply EFPC as a surrogate RE process. This article presents an application of the method as a part of the requirements construction process, specifically for requirements verification.","cites":"0","conferencePercentile":"10"},{"venue":"WER","id":"e0f83a441a2a659a4b1581142d41a34163446f0f","venue_1":"WER","year":"2008","title":"Can Rules of Inferences Resolve Coordination Ambiguity in Natural Language Requirements Specification?","authors":"Sri Fatimah Tjong, Daniel M. Berry","author_ids":"3172880, 1684228","abstract":"Coordination ambiguity is the ambiguity that occurs from the use of coordinators such as and and or. The first author's previous work tried to resolve coordination ambiguity in natural language (NL) requirements specifications (RSs) by using language patterns derived from rules of logic (RLs). However, a reevaluation of the language patterns show that RLs cannot fully resolve coordination ambiguity in a RS because the coordinators are not always truth functional, due to incompatible interpretations that a human ascribes to the ambiguous RS. Furthermore, human perceptions in the interpretation of the coordinators in a RS vary incredibly widely. The implications of this observation on requirements elicitation are discussed.","cites":"0","conferencePercentile":"30"},{"venue":"WER","id":"3ecb84dc67c7532bf590d251683970e5edce64c9","venue_1":"WER","year":"2007","title":"Extended Disambiguation Rules for Requirements Specifications","authors":"Sri Fatimah Tjong, Michael Hartley, Daniel M. Berry","author_ids":"3172880, 2206996, 1684228","abstract":"This paper extends earlier work by the authors in identifying guiding rules for natural language (NL) requirements specifications (RSs) by analysing a few sets of requirements documents from different domains. It presents guiding rules that help reduce ambiguities and imprecision in NL RSs. It validates these rules by applying them to sentences in several industrial strength NL RSs.","cites":"3","conferencePercentile":"45"},{"venue":"WER","id":"4602f125124f1808aebf950d63eb2c34cc57f07a","venue_1":"WER","year":"2007","title":"Requirements for Tools for Ambiguity Identification and Measurement in Natural Language Requirements Specifications","authors":"Nadzeya Kiyavitskaya, Nicola Zeni, Luisa Mich, Daniel M. Berry","author_ids":"1731618, 1832068, 1722578, 1684228","abstract":"This paper proposes a two-step approach to identifying ambiguities in natural language (NL) requirements specifications (RSs). In the first step, a tool would apply a set of ambiguity measures to a RS in order to identify potentially ambiguous sentences in the RS. In the second step, another tool would show what specifically is potentially ambiguous about each potentially ambiguous sentence. The final decision of ambiguity remains with the human users of the tools. The paper describes several requirements-identification experiments with several small NL RSs using four prototypes of the first tool based on linguistic instruments and resources of different complexity and a manual mock-up of the second tool.","cites":"43","conferencePercentile":"100"},{"venue":"WER","id":"777895687fd38fa34d61a747653f3864d2492dfb","venue_1":"WER","year":"2002","title":"Metamodeling for Requirements Reuse","authors":"Oscar López, Miguel A. Laguna, Francisco J. García-Peñalvo","author_ids":"8437775, 1750181, 1722931","abstract":"Correct requirements determination is a critical factor in software development as it takes resources and it is an error prone activity which can bring tragic consequences to the rest of the software life cycle. Having stored reusable requirements elements, both qualified and classified, in a repository might contribute to taking advantage of software development resources and to reducing the error probability in requirements specifications. However, the diversity of notations and formats, as well as the existence of different levels of requirements description make requirements reuse difficult. In this paper we present a meta-model to integrate some different types of semiformal diagrams into a requirements reuse approach. The description of reusable elements constitutes the basis for benefiting from diverse representations of requirements in the development of specifications by reusing requirements.","cites":"13","conferencePercentile":"100"},{"venue":"WER","id":"a93fd91fdf1d33cec57c6a77b9ccd73bd3eac6e9","venue_1":"WER","year":"2008","title":"Uma abordagem semi-automática para a manutenção de links de rastreabilidade","authors":"Marcelio D'Oliveira Leal, Mayara Figueiredo, Cleidson R. B. de Souza","author_ids":"1916736, 2818044, 1809430","abstract":"1. Introdução Visando manter a qualidade do software produzido e a satisfação do cliente, a engenharia de software tradicionalmente enfatiza uma responsabilidade em elicitar os requisitos e garantir que eles evoluam corretamente no decorrer do projeto. A gerência de requisitos é a área do processo que tem como objetivo controlar a criação e evolução destes requisitos [25]. As principais atividades da gerência de requisitos segundo Kotonya & Sommerville [24] são: gerenciar os requisitos e suas mudanças e gerenciar os links entre os requisitos, e entre os artefatos da fase de requisitos e os demais artefatos produzidos ao longo do processo de desenvolvimento de software. Neste contexto, percebe-se uma grande preocupação em se ter uma visão dos relacionamentos que envolvem os requisitos. De fato, o sucesso da gerência de requisitos depende diretamente de quão bem definidos são estes relacionamentos entre os requisitos e outros conjuntos de artefatos gerados durante o processo de desenvolvimento [23]. A criação desses relacionamentos, que são chamados links de rastreabilidade, entre os itens é responsabilidade da Rastreabilidade de Software (RS). A RS é a capacidade de relacionar artefatos criados durante o processo de desenvolvimento de software, relacionar os stakeholders que contribuíram com o desenvolvimento de um artefato, e as decisões de projeto que contribuíram para a construção dos artefatos [08]. Estes relacionamentos descrevem o sistema sob diferentes perspectivas ou níveis de abstração [08]. A RS tem se mostrado um importante aspecto de apoio a todas as fases do processo de desenvolvimento de software, além de contribuir para uma melhor qualidade do produto final [08, 09, 13, 14]. Apesar destes benefícios claros, a gerência de requisitos, especialmente a rastreabilidade de requisitos, ainda é uma atividade cara [23]. Este custo depende diretamente do nível de detalhe das atividades, da diversidade das informações coletadas e, principalmente, de como é feito o processo de criação das informações da rastreabilidade. O objetivo deste trabalho é descrever uma abordagem semi-automática para a criação e manutenção da RS a partir dos artefatos produzidos durante o processo. Esta abordagem visa maximizar a qualidade dos links e itens de rastreabilidade encontrados, utilizando como base: a combinação de metodologias de processo de desenvolvimento de software; Unifield Modeling Language (UML); templates de artefatos; análise de documentos textuais; e a definição de regras para busca dos itens e links de","cites":"1","conferencePercentile":"67.5"},{"venue":"WER","id":"f45a0499902729ae2c67f7aefe05cd11937a59f7","venue_1":"WER","year":"2008","title":"Engenharia de requisitos em ambientes distribuidos de desenvolvimento de software: resultados preliminares de um estudo etnográfico","authors":"Alline de Melo Lemos, Cleidson R. B. de Souza","author_ids":"2774767, 1809430","abstract":"Distribuído de Software (DDS), uma nova área da Engenharia de Software que se caracteriza pela distância física e/ou temporal entre alguns elementos (cliente, usuário e desenvolvedores, por exemplo, envolvidos no processo de desenvolvimento [2]. De uma maneira geral, os seguintes fatores podem ser citados como motivações para o DDS [3; 4]: 1) a necessidade de uma empresa estar próxima de seus clientes; 2) o surgimento de nações como participantes ativas no mercado mundial de software; 3) os benefícios econômicos encontrados nestas nações (mão-de-obra qualificada e de 10 a 30% mais barata), e; 4) a possibilidade de desenvolvimento follow-the-sun, isto é, as equipes estão distribuídas em diversos países permitindo que o desenvolvimento do software nunca pare. Em DDS, entretanto, existe uma série de desafios a serem vencidos, sendo o maior deles a engenharia de requisitos [2]. Segundo Damian e Zowghi [5], a engenharia de requisitos (ER) já envolve atividades suficientemente complicadas quando realizadas de forma local. Em ambientes distribuídos, estas atividades se tornam ainda mais problemáticas, sobretudo em virtude das diferenças culturais, temporais e geográficas enfrentadas pelos integrantes das equipes envolvidas. Para ser mais específico, a globalização gera dois grandes desafios à comunidade de pesquisa em engenharia de requisitos [6]. O primeiro desafio diz respeito à criação ou aprimoramento de técnicas de ER que apóiem as demais atividades envolvidas no desenvolvimento distribuído de software, como a codificação ou o teste do sistema. Isto é necessário porque a distância agrava a lacuna existente entre os analistas de requisitos e os desenvolvedores, sobretudo se são indivíduos que trabalham em organizações situadas em países diferentes. Esta lacuna também pode existir entre analistas de requisitos e seus clientes, exigindo que os primeiros se desloquem ao ambiente de trabalho dos segundos e vice-versa. Uma vez que a comunicação entre os stakeholders diminui devido à distância [7], aumentam as chances de os requisitos serem mal interpretados e conseqüentemente de pouca utilidade ao cliente final. O segundo desafio consiste em permitir que as etapas da ER sejam realizadas de forma eficiente em ambientes distribuídos. A tendência","cites":"0","conferencePercentile":"30"}]}