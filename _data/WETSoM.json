{"WETSoM.csv":[{"venue":"WETSoM","id":"2bdb787767ef26267c49c0d47f0a194867b430ff","venue_1":"WETSoM","year":"2014","title":"In-depth measurement and analysis on densification power law of software execution","authors":"Yu Qu, Qinghua Zheng, Ting Liu, Jian Li, Xiaohong Guan","author_ids":"1703607, 1719603, 1691474, 1701502, 1693616","abstract":"Measuring software execution is important for many software engineering tasks. In this paper, Densification Power Law (DPL) of software execution is measured and studied as a feature of growing software complexity. Densification means that during a networked system&#039;s evolution, it usually becomes denser and the number of edges and nodes grows with a consistent super linear relation. This feature was discovered and reported in 2005. In this paper, based on a measurement of 15 open-source Java programs, we show that when software systems are modeled as a series of dynamic Call Graphs during their executions, they always obey DPL with very close correlation. Then a comparison between static Call Graph and DPL is presented, showing that DPL&#039;s properties cannot be derived statically. An explanation for DPL of software execution is given and verified. We believe the universality of DPL makes it an appropriate metric for software execution process.","cites":"3","conferencePercentile":"100"},{"venue":"WETSoM","id":"5d0b54b6d2cdadc9c2547d18b6d312f5bc892e29","venue_1":"WETSoM","year":"2013","title":"Dynamic adaptive Search Based Software Engineering needs fast approximate metrics (keynote)","authors":"Mark Harman, John A. Clark, Mel Ó Cinnéide","author_ids":"1707775, 2591945, 1735842","abstract":"—Search Based Software Engineering (SBSE) uses fitness functions to guide an automated search for solutions to challenging software engineering problems. The fitness function is a form of software metric, so there is a natural and close interrelationship between software metics and SBSE. SBSE can be used as a way to experimentally validate metrics, revealing startling conflicts between metrics that purport to measure the same software attributes. SBSE also requires new forms of surrogate metrics. This topic is less well studied and, therefore, remains an interesting open problem for future work. This paper 1 overviews recent results on SBSE for experimental metric validation and discusses the open problem of fast approximate surrogate metrics for dynamic adaptive SBSE.","cites":"0","conferencePercentile":"30"},{"venue":"WETSoM","id":"2ca5b3bedba48d58d83b249d7e1855a31552e428","venue_1":"WETSoM","year":"2014","title":"Towards a catalog format for software metrics","authors":"Eric Bouwers, Arie van Deursen, Joost Visser","author_ids":"2364689, 1737202, 1755164","abstract":"In the past two decades both the industry and the research community have proposed hundreds of metrics to track software projects, evaluate quality or estimate effort. Unfortunately, it is not always clear which metric works best in a particular context. Even worse, for some metrics there is little evidence whether the metric measures the attribute it was designed to measure. \n  In this paper we propose a catalog format for software metrics as a first step towards a consolidated overview of available software metrics. This format is designed to provide an overview of the status of a metric in a glance, while providing enough information to make an informed decision about the use of the metric. We envision this format to be implemented in a (semantic) wiki to ensure that relationships between metrics can be followed with ease.","cites":"1","conferencePercentile":"66.66666667"},{"venue":"WETSoM","id":"5fbfa4e0477bd6f99e5ae5aff63f233a96d4057c","venue_1":"WETSoM","year":"2011","title":"Which code construct metrics are symptoms of post release failures?","authors":"Meiyappan Nagappan, Brendan Murphy, Mladen A. Vouk","author_ids":"3273797, 1735814, 1761588","abstract":"Software metrics, such as code complexity metrics and code churn metrics, are used to predict failures. In this paper we study a specific set of metrics called code construct metrics and relate them to post release failures. We use the values of the code construct metrics for each file to characterize that file. We analyze the code construct metrics along with the post release failure data on the files (that splits the files into two classes: files with post release failures and files without post release failures). In our analysis we compare a file with post release failure to a set of files without post release failures, that have similar characteristics. In our comparison we identify which code construct metric, more often than the others, differs the most between these two classes of files. The goal of our research is to find out which code construct metrics can perhaps be used as symptoms of post release failures. In this paper we analyzed the code construct metrics of Eclipse 2.0, 2.1, and 3.0. Our results indicate that MethodInvocation, QualifiedName, and SimpleName, are the code constructs that differentiates the two classes of files the most and hence are the key symptoms/indicators of a file with post release failures in these versions of Eclipse.","cites":"1","conferencePercentile":"26.66666667"},{"venue":"WETSoM","id":"c3793bf7af87da7f5206b33f6e59dc85a18770e9","venue_1":"WETSoM","year":"2011","title":"By no means: a study on aggregating software metrics","authors":"Bogdan Vasilescu, Alexander Serebrenik, Mark van den Brand","author_ids":"2434621, 1747171, 1718306","abstract":"Fault prediction models usually employ software metrics which were previously shown to be a strong predictor for defects, e.g., SLOC. However, metrics are usually defined on a microlevel (method, class, package), and should therefore be aggregated in order to provide insights in the evolution at the macro-level (system). In addition to traditional aggregation techniques such as the <i>mean, median</i>, or <i>sum</i>, recently econometric aggregation techniques, such as the Gini, Theil, and Hoover indices have been proposed. In this paper we wish to understand whether the aggregation technique influences the presence and strength of the relation between SLOC and defects. Our results indicate that correlation is not strong, and is influenced by the aggregation technique.","cites":"13","conferencePercentile":"100"}]}