{"WEUSE_08.csv":[{"venue":"WEUSE '08","id":"72694436b3eb23d141fa9fb13ec69edd5699ea70","venue_1":"WEUSE '08","year":"2008","title":"Drawing services: towards a paper-based interface for end-user service orchestration","authors":"Bj&#246;rn Borggr&#228;fe, Christian D&#246;rner, Jan He&#223;, Volkmar Pipek","author_ids":", , , 1700253","abstract":"One of the challenges end-users face in order to maintain and enhance their IT infrastructures is the simplicity and ease of use of the configuration/design-time interfaces. In this paper we describe our approach of using existing technologies for paper-based interfaces to allow end-users to orchestrate services in a Service-Oriented Architecture (SOA). We gathered first experiences with paper-based interfaces for IT configuration by developing an end-user-developable paper-based remote interface for interactive TV applications. Further we conducted a workshop to evaluate how end-user can orchestrate services. Here, we discuss the usefulness of a paper-based interface for the orchestration of services, from an end-user perspective and how the experiences from our prototype and the workshop can inform the design of a paper-based orchestration prototype for SOA.","cites":"1","conferencePercentile":"17.5"},{"venue":"WEUSE '08","id":"7a7465fd51c85fbe8a840e138969d4a2711bd6eb","venue_1":"WEUSE '08","year":"2008","title":"Teaching software engineering to end-users","authors":"Medha Umarji, Mark Pohl, Carolyn Seaman, A. G&#252;ne_ Koru, Hongfang Liu","author_ids":"1941769, 3000841, 5035095, , 1748831","abstract":"Bioinformatics software is an example of immensely complex and critical scientific software, and this domain provides an excellent illustration of the role of end user computing in the sciences. To explore these interesting characteristics from a software engineering standpoint, we had conducted an exploratory survey of bioinformatics developers. The survey had a range of questions about people, processes and products. As software engineering researchers, we realized that the survey results had important implications for the education of bioinformatics software professionals. Through this paper we intend to open an avenue of discussion about software engineering knowledge that should be taught to end user programmers, based on our findings in the bioinformatics domain. In addition to the survey results we went through the curricula of more than fifty bioinformatics programs as well as the contents of over fifteen textbooks. We observed that there was no mention of the role and importance of software engineering practices essential for creating dependable software systems. We present a set of recommendations for improving bioinformatics education in terms of software engineering principles and ways that they apply in the context of end-user development.","cites":"2","conferencePercentile":"30"},{"venue":"WEUSE '08","id":"1363677b658d0e8700ef4efed06ef763ec6fbef9","venue_1":"WEUSE '08","year":"2008","title":"Gender in end-user software engineering","authors":"Margaret Burnett, Susan Wiedenbeck, Valentina Grigoreanu, Neeraja Subrahmaniyan, Laura Beckwith, Cory Kissinger","author_ids":"1737204, 1682649, 3168790, 2281347, 2434825, 3306524","abstract":"In this paper, we describe research that reports gender differences in usage of software engineering tools by end-user programmers. We connect these findings with possible explanations based on theories from other disciplines, and then add to that our recent results that these differences go deeper than software engineering tool usage to software engineering strategies. We enumerate the strategies that work better for males and the ones that work better for females, and discuss implications and possible directions for follow-up.","cites":"3","conferencePercentile":"42.5"},{"venue":"WEUSE '08","id":"6e99295ddcb060b55c887d1aa8209c2e2e9422c4","venue_1":"WEUSE '08","year":"2008","title":"End users as unwitting software developers","authors":"Maria Francesca Costabile, Piero Mussio, Loredana Parasiliti Provenza, Antonio Piccinno","author_ids":"2493379, 1801252, , 1710752","abstract":"The widespread use of personal software systems and the boom of the so-called Web 2.0 is erasing the distinctions between those who create software products and those who use or consume them. End users are increasingly involved in the design and development of the tools they use. Unfortunately, there is a high incidence of errors in applications developed by end users. In this paper, a view on end-user development is outlined, which identifies the communication gap between end users and professional software developers as one main source of errors. The spectrum of users that lie between pure end users and professional developers is examined. In particular, the focus is on a particular type of end users that are very active in shaping software tools to their needs without being aware that they are programming: in short, they are unwitting programmers. Their characteristics and their need of appropriate development techniques and environments are analyzed. Finally, the meta-design participatory approach we have developed is briefly described to show how it fills the communication gap and well supports the activities of unwitting programmers.","cites":"16","conferencePercentile":"90"},{"venue":"WEUSE '08","id":"6016afd189278882235a0d4fb475d92da92ef085","venue_1":"WEUSE '08","year":"2008","title":"End-user development: new challenges for service oriented architectures","authors":"Christian D&#246;rner, Volkmar Pipek, Moritz Weber, Volker Wulf","author_ids":", 1700253, 2208893, 1722564","abstract":"Service Oriented Architectures (SOA) evolved as an important architectural concept in software engineering. Although the services of an SOA are loosely coupled and reusable, there have been few considerations of SOA in terms of End User Development (EUD). In this paper we will analyze the potential of SOA for the development of adaptable systems and propose challenges, which have to be solved to reach this goal. Our analysis is based on empirical studies and on requirements for EUD systems, taken from earlier research. If SOAs are extended with structures for in-use-modifications (even beyond software technologies), it will be possible to design a new generation of user-adaptable systems.","cites":"7","conferencePercentile":"77.5"},{"venue":"WEUSE '08","id":"362d23ed80ec7045c76f60c2c78d93d6316f9f36","venue_1":"WEUSE '08","year":"2008","title":"Opportunistic programming: how rapid ideation and prototyping occur in practice","authors":"Joel Brandt, Philip J. Guo, Joel Lewenstein, Scott R. Klemmer","author_ids":"1702922, 2251384, 2660322, 1728167","abstract":"At times, programmers work opportunistically, emphasizing speed and ease of development over code robustness and maintainability. They do this to prototype, ideate, and discover; to understand as quickly as possible what the right solution is. Despite its importance, opportunistic programming remains poorly understood when compared with traditional software engineering. Through fieldwork and a laboratory study, we observed five characteristics of opportunistic programming: Programmers build software from scratch using high-level tools, often add new functionality via copy-and-paste, iterate more rapidly than in traditional development, consider code to be impermanent, and face unique debugging challenges because their applications often comprise many languages and tools composed without upfront design. Based on these characteristics, we discuss future research on tools for debugging, code foraging and reuse, and documentation that are specifically targeted at this style of development.","cites":"32","conferencePercentile":"100"},{"venue":"WEUSE '08","id":"070e78c97364284942acf3ff4fca37df02dd5d3a","venue_1":"WEUSE '08","year":"2008","title":"What do we \"mashup\" when we make mashups?","authors":"Jeffrey Wong, Jason Hong","author_ids":"6633643, 2503586","abstract":"This paper describes preliminary work in the uncovering of mashup patterns in order to find new directions for the design of mashup tools. We conducted a qualitative survey of high-quality mashups, as nominated in two popular mashup directories, and examined how the mashups made use of existing websites or improved upon them, how data from multiple websites were combined, and what kinds of user tasks these mashups might be suitable for. We describe a set of patterns what we found in our sample of mashups.","cites":"31","conferencePercentile":"95"},{"venue":"WEUSE '08","id":"543d1fbf898234c8009993a6ade9c7277a24bf1e","venue_1":"WEUSE '08","year":"2008","title":"More natural end-user software engineering","authors":"Brad A. Myers, Andrew J. Ko, Sun Young Park, Jeffrey Stylos, Thomas D. LaToza, Jack Beaton","author_ids":"1707801, 3314595, 1824138, 2766620, 1683595, 2165125","abstract":"The \"Natural Programming\" project at Carnegie Mellon University has been working for more than 10 years to make programming more \"natural\", or closer to the way people think. We have addressed the needs of all kinds of programmers: novices, professionals and end-user programmers. Many studies were performed which provided new insights and led to new models of programmers. From these insights and models, we created new programming languages and environments. Evaluations of the resulting systems have shown that they are effective and successful. This paper provides an overview of the entire 10-year Natural Programming project, but focuses on our new results since WEUSE-III in Dagstuhl.","cites":"6","conferencePercentile":"67.5"},{"venue":"WEUSE '08","id":"3b4d7fa6970a0c2d68dc628cc3b170f36bbd3a9f","venue_1":"WEUSE '08","year":"2008","title":"Using topes to validate and reformat data in end-user programming tools","authors":"Christopher Scaffidi, Allen Cypher, Sebastian Elbaum, Andhy Koesnandar, James Lin, Brad Myers, Mary Shaw","author_ids":"1730462, 1809071, 2190688, 2005246, 6431436, 1707801, 1778572","abstract":"End-user programming tools offer no data types except \"string\" for many categories of data, such as person names and street addresses. Consequently, these tools cannot automatically validate or reformat these data. To address this problem, we have developed a user-extensible model for string-like data. Each \"tope\" in this model is a user-defined abstraction that guides the interpretation of strings as a particular kind of data. Specifically, each tope implementation contains software functions for recognizing and reformatting instances of that tope's kind of data. This makes it possible at runtime to distinguish between invalid data, valid data, and questionable data that could be valid or invalid. Once identified, questionable and/or invalid data can be double-checked and possibly corrected, thereby increasing the overall reliability of the data. Valid data can be automatically reformatted to any of the formats appropriate for that kind of data. To show the general applicability of topes, we describe new features that topes have enabled us to provide in four tools.","cites":"7","conferencePercentile":"77.5"}]}