{"WFLP.csv":[{"venue":"WFLP","id":"2c923591296ac08660be71adbd8f0da4de37de53","venue_1":"WFLP","year":"2011","title":"Memoizing a Monadic Mixin DSL","authors":"Pieter Wuille, Tom Schrijvers, Horst Samulowitz, Guido Tack, Peter J. Stuckey","author_ids":"3060013, 1804943, 1756353, 1710340, 1682747","abstract":"Modular extensibility is a highly desirable property of a domain-specific language (DSL): the ability to add new features without affecting the implementation of existing features. Functional mixins (also known as open recursion) are highly suitable for this purpose. We study the use of mixins in Haskell for a modular DSL for search heuristics used in systematic solvers for combinatorial problems, that generate optimized C ++ code from a high-level specification. We show how to apply memoization techniques to tackle performance issues and code explosion due to the highly recursive nature of the mixins. As such heuristics are conventionally implemented as highly entangled imperative algorithms, our Haskell mixins are monadic. Memoization of monadic components causes further complications for us to deal with.","cites":"0","conferencePercentile":"14.28571429"}]}