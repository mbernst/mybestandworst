{"WICSA.csv":[{"venue":"WICSA","id":"07d0cb925c35f962470541b111edb10e0d6e7d09","venue_1":"WICSA","year":"2008","title":"uDesign: End-User Design Applied to Monitoring and Control Applications for Smart Spaces","authors":"João Pedro Sousa, Bradley R. Schmerl, Vahe Poladian, Alexander Brodsky","author_ids":"1688217, 1779234, 2798286, 8674149","abstract":"This paper introduces an architectural style for enabling end-users to quickly design and deploy software systems in domains characterized by highly per-sonalized and dynamic requirements. The style offers an intuitive metaphor based on boxes, pipes, and wires, but retains enough precise-ness that systems can be automatically assembled and dynamically reconfigured based on uDesign descriptions. uDesign was primarily motivated and validated within monitoring and control applications for smart spaces, but we envision possible extensions to other domains. Our contribution differs from early attempts at end-user programming in the level of abstraction, software architecture rather than programming, and in the subject of description: run-time rather than code structures. To validate the approach, the paper presents (a) two case studies, one in health care and one in home security, (b) the formal semantics of uDesign's primi-tives, and (c) a mapping of those primitives to an existing software infrastructure: the Aura infrastructure.","cites":"9","conferencePercentile":"66.66666667"},{"venue":"WICSA","id":"13e146f53afee8863efd9d99e068030427d776ca","venue_1":"WICSA","year":"2011","title":"Evaluating Security Properties of Architectures in Unpredictable Environments: A Case for Cloud","authors":"Funmilade Faniyi, Rami Bahsoon, Andy Evans, Rick Kazman","author_ids":"2162410, 1804288, 2536860, 1699020","abstract":"—The continuous evolution and unpredictability underlying service-based systems leads to difficulties in making exact QoS claims about the dependability of architectures interfacing with them. Hence, there is a growing need for new methods to evaluate the dependability of architectures interfacing with such environments. This paper presents a method for evaluating the security quality attribute of architectures in service-based systems. The proposed method combines some properties of the Architectural Tradeoff Analysis Method (ATAM) and security testing using Implied Scenario. In particular, the scenario elicitation process of ATAM is improved by utilising Implied Scenario technique to generate scenarios which may be un-detected using plain ATAM. An industrial case study of a problem related to securing data at the Software-as-a-Service layer on Force.com Cloud platform is adopted to validate the new method. The results indicate that our method found four additional security scenarios beyond the plain ATAM, resulting in four new risks and two new tradeoff points. I. INTRODUCTION The success recorded by some of the dominant Cloud service providers (e.g. Amazon EC2, Salesforce, Google App Engine) has motivated many organisations to consider adopting Cloud services as a means of reducing IT operational cost amongst other benefits. The risk of data misuse, data loss and security breaches however, remains a major concern for most Cloud users. An example is the case of a phishing attack targeted at Salesforce.com which led to the theft of customers' emails and addresses [1]. The inability of Cloud providers to meet security requirements which are mandated by territorial laws governing critical applications such as financial and health systems has necessitated the design of secure architectures interfacing the Cloud to exploit the economies of scale offered by Cloud Computing. One approach adopted by such Cloud interfacing architectures is to store some sensitive data in their local datacentres while other non-sensitive data are stored in the Cloud. Two examples in the literature adopting this approach are the work of [1] and [2]. While these results provide some insight into addressing the security","cites":"6","conferencePercentile":"55"},{"venue":"WICSA","id":"4f4ac0733aa8060045cb2cc8cdcfefa5bd85d001","venue_1":"WICSA","year":"2002","title":"Using Architectural Style as a Basis for System Self-repair","authors":"Shang-Wen Cheng, David Garlan, Bradley R. Schmerl, João Pedro Sousa, Bridget Spitznagel, Peter Steenkiste","author_ids":"1757228, 1775949, 1779234, 1688217, 1781940, 1728086","abstract":"An increasingly important requirement for software systems is the capability to adapt at run time in order to accommodate varying resources, system errors, and changing requirements. For such self-repairing systems, one of the hard problems is determining when a change is needed, and knowing what kind of adaptation is required. Recently several researchers have explored the possibility of using architectural models as a basis for run time monitoring, error detection , and repair. Each of these efforts, however, has demonstrated the feasibility of using architectural models in the context of a specific style. In this paper we show how to generalize these solutions by making architectural style a parameter in the monitoring/repair framework and its supporting infrastructure. The value of this generalization is that it allows one to tailor monitor-ing/repair mechanisms to match both the properties of interest (such as performance or security), and the available operators for run time adaptation. 1. INTRODUCTION An increasingly important requirement for software-based systems is the ability to adapt themselves at run time to handle such things as resource variability, changing user needs, and system faults. In the past, systems that supported self-adaptation were rare, confined mostly to domains like telecommunications switches or deep space control software, where taking a system down for upgrades was not an option, and where human intervention was not always feasible. However, today more and","cites":"58","conferencePercentile":"75"},{"venue":"WICSA","id":"de74c3d331fdf67c03b0cdf25171d8c26718e59a","venue_1":"WICSA","year":"2011","title":"A Runtime Resource-Management Framework for Embedded Service-Oriented Systems","authors":"Peter Newman, Gerald Kotonya","author_ids":"1792537, 1989772","abstract":"—Service-Oriented Computing (SOC) has rapidly progressed in recent years, with examples appearing in numerous application areas including business processes, high-performance computing, web-based services, and embedded systems. In the embedded systems domain, ubiquitous devices, context-aware systems, and sensor networks are increasingly being used in a plethora of areas. However, because of the nature of their operating environment, service-oriented embedded systems (SOeS) pose unique challenges to quality management. SOeS have to contend not only with the quality of services from providers, but also with the constrained system resources in their operating environment. SOeS need to efficiently utilise available system resources by dynamically adapting themselves to changes in their runtime environment. This paper discusses current SOC resource-management initiatives, setting out the challenges that SOeS systems must overcome, and proposes a pluggable, runtime resource-management framework for SOeS.","cites":"1","conferencePercentile":"17.5"},{"venue":"WICSA","id":"bf394094cfef36d550600dc0c1fc8629932643b7","venue_1":"WICSA","year":"2005","title":"A Declarative Approach to Architectural Reflection","authors":"Mads Ingstrup, Klaus Marius Hansen","author_ids":"1718603, 1781815","abstract":"Recent research shows runtime architectural reflection is instrumental in, for instance, building adaptive and flexible systems or checking correspondence between design and implementation. Moreover, experience with computational reflection in various branches of computer science shows that the interface through which the meta-information of the running system is accessed, and possibly modified, lies at the heart of designing reflective systems. This paper proposes that such an interface should be like a database: ac-cessed through queries expressed using the concepts with which architecture is described. Specifically, our contributions are: (1) a presentation of the general idea of a query-based approach to architectural reflection, (2) a definition of an Architectural Query Language (AQL) in which perspectives on an architectural model can be expressed as queries, (3) a prototype of a system which both creates runtime models of specific distributed architectures and allow for evaluation of AQL queries on these models. We illustrate the viability of the approach in two particular applications of such a model: constraint checking relative to an architectural style, and reasoning about certain quality attributes of an architecture.","cites":"5","conferencePercentile":"59.09090909"},{"venue":"WICSA","id":"71f77d8fa3855d3e80966b8a9950f0c4ca22e2d8","venue_1":"WICSA","year":"2007","title":"Architectural Misalignment: An Experience Report","authors":"Matthew Bass, Vesna Mikulovic, Leonard J. Bass, James D. Herbsleb, Marcelo Cataldo","author_ids":"1732276, 2490481, 2040359, 1705550, 1794980","abstract":"It has been well documented that there is a correlation between the structure of an architecture and the organization that produces it. More concretely there is a correlation between task interdependencies and coordination among the people or teams realizing these tasks. The amount of coordination needed among teams is related to the nature of these task interdependencies. As the scale and complexity of organization and systems grow it is not uncommon to have factors such as geographic boundaries, organization boundaries, cultural differences, and so forth impede the ability of certain individuals or teams to coordinate effectively. While there is some understanding of the factors that impede the ability of teams to coordinate, the factors that cause task interdependence in software systems is less well understood. The current view is that it is the interactions across module boundaries (assuming a module is assigned as a task or work item to a single team) that cause task interdependence; we have found that this view is not sufficient. In this paper we present three cases where additional architectural mechanisms created task interdependencies that the organizations were unable to accommodate. We go on to discuss the implications of these findings and suggest future research activities.","cites":"17","conferencePercentile":"70"},{"venue":"WICSA","id":"687326caad4981c785f41523ae40cf3908cba26e","venue_1":"WICSA","year":"2005","title":"Customized Benchmark Generation Using MDA","authors":"Liming Zhu, Yan Liu, Ian Gorton, Ngoc Bao Bui","author_ids":"8301531, 1681842, 1680770, 3335913","abstract":"This paper describes an approach for generating customized benchmark applications from a software architecture description using a Model Driven Architecture (MDA) approach. The benchmark generation and performance data capture tool implementation is based on widely used open source MDA frameworks. The business logic of the benchmark application is modeled in UML and generated by taking advantage of the existing generation \" cartridges \" so that the current component technology can be exploited in the benchmark. This greatly reduces the effort and expertise needed for benchmarking with complex component technology. We have also extended the MDA framework to model and generate a load testing suite and automatic performance measurement infrastructure. The approach complements current model-based performance prediction and analysis methods by generating the benchmark application from the same application architecture that the performance models are derived from. This provides the potential for tightly integrating runtime performance measurement with model-based prediction either for model validation or improving model prediction accuracy. We illustrate the approach using a case study based on EJB component technology.","cites":"4","conferencePercentile":"50"},{"venue":"WICSA","id":"09a230c7f0fca40a48b8f2070b6f8b6d44ae29ae","venue_1":"WICSA","year":"2004","title":"Symphony: View-Driven Software Architecture Reconstruction","authors":"Arie van Deursen, Christine Hofmeister, Rainer Koschke, Leon Moonen, Claudio Riva","author_ids":"1737202, 8383743, 1704279, 1762006, 2719460","abstract":"Authentic descriptions of a software architecture are required as a reliable foundation for any but trivial changes to a system. Far too often, architecture descriptions of existing systems are out of sync with the implementation. If they are, they must be reconstructed. There are many existing techniques for reconstructing individual architecture views, but no information about how to select views for reconstruction, or about process aspects of architecture reconstruction in general. In this paper we describe view-driven process for reconstructing software architecture that fills this gap. To describe Symphony, we present and compare different case studies, thus serving a secondary goal of sharing real-life reconstruction experience. The Symphony process incorporates the state of the practice , where reconstruction is problem-driven and uses a rich set of architecture views. Symphony provides a common framework for reporting reconstruction experiences and for comparing reconstruction approaches. Finally, it is a vehicle for exposing and demarcating research problems in software architecture reconstruction.","cites":"60","conferencePercentile":"100"},{"venue":"WICSA","id":"016e1a30368724a5a235456d247aa59aa312b4de","venue_1":"WICSA","year":"2002","title":"Aura: an Architectural Framework for User Mobility in Ubiquitous Computing Environments","authors":"João Pedro Sousa, David Garlan","author_ids":"1688217, 1775949","abstract":"Ubiquitous computing poses a number of challenges for software architecture. One of the most important is the ability to design software systems that accommodate dynamically-changing resources. Resource variability arises naturally in a ubiquitous computing setting through user mobility (a user moves from one computing environment to another), and through the need to exploit time-varying resources in a given environment (such as wireless bandwidth). Traditional approaches to handling resource variability in applications attempt to address the problem by imposing uniformity on the environment. We argue that those approaches are inadequate, and describe an alternative architectural framework that is better matched to the needs of ubiquitous computing. A key feature of the architecture is that user tasks become first class entities. User proxies, or Auras, use models of user tasks to set up, monitor and adapt computing environments proactively. The architectural framework has been implemented and currently being used as a central component of Project Aura, a campus-wide ubiquitous computing effort.","cites":"306","conferencePercentile":"100"},{"venue":"WICSA","id":"6ce7c483514d30cc18393c0eee0f34948f9e1087","venue_1":"WICSA","year":"2004","title":"Real-time Collaboration in Activity-based Architectures","authors":"Jakob E. Bardram, Henrik Bærbak Christensen","author_ids":"7475687, 2836060","abstract":"With the growing research into mobile and ubiquitous computing , there is a need for addressing how such infrastruc-tures can support collaboration between nomadic users. We present the activity based computing paradigm and outline a proposal for handling collaboration in an activity-based architecture. We argue that activity-based computing establishes a natural and sound conceptual and architectural basis for session management in real-time, synchronous collaboration .","cites":"2","conferencePercentile":"12"},{"venue":"WICSA","id":"f465c241e341532209d2dae458b983bfff6a2963","venue_1":"WICSA","year":"2007","title":"The Duties, Skills, and Knowledge of Software Architects","authors":"Paul C. Clements, Rick Kazman, Mark Klein, Divya Devesh, Shivani Reddy, Prageti Verma","author_ids":"1734918, 1699020, 3920905, 3012885, 2616679, 3253337","abstract":"Much research in the software architecture field in recent years has focused on technical aspects of architecting: architectural styles, documentation, analysis, architecture description languages, architectural reverse engineering, and so forth [1]. But what does it mean for an architect, or an architecting organization to be competent? We assert that duties, skills, and knowledge form a triad on which architecture competence rests. Skills and knowledge support the ability to perform the required duties. An omniscient, infinitely skilled architect is of no use if he or she cannot (for whatever reason) perform the duties required of the position; we might say that person possessed great potential, but we would not say that person was competent. In particular, we are working towards understanding the following issues: o What does it mean to be a competent architect? How can we measure the architectural competence of an individual? o What does it mean to be an architecturally competent organization? How can we measure the architecture competence of an organization? o How can an individual increase his or her architectural competence over time? How can an organization increase its overall architectural competence? These questions define a large research area that is only now beginning to be explored. The \" end game \" of competence, of course, is to reliably produce high-quality architectures, but there is much more to it than that. For one thing, architects spend much of their time doing things other than producing an architecture for the current project. For another, organizations must put in place forward-looking practices and support to assure high-quality architectures in the future; focusing only on the architecture(s) at hand will eventually lead to failure. The desired output of this program of research is to propose a working \" theory \" of architectural competence and a framework for discussing and, eventually, measuring competence. This theory may be informal at first, but at the least we expect that it will provide some practical guidance. Perhaps initially the model will simply consist of lists of duties, skills, and knowledge that an individual or an organization must master, but eventually these lists will be replaced with a more detailed understanding of the relationships between what an architect (or architecting organization) does and the effects those things have on the quality of architectures produced both now and in the future. At the SEI, we are working on creating this theory of competence. Our work …","cites":"29","conferencePercentile":"85"},{"venue":"WICSA","id":"734fb9dc5e5d7463cf8fdef593f39e40f1fe4896","venue_1":"WICSA","year":"2008","title":"Evaluating the Software Architecture Competence of Organizations","authors":"Leonard J. Bass, Paul C. Clements, Rick Kazman, Mark Klein","author_ids":"2040359, 1734918, 1699020, 3920905","abstract":"An organization is architecturally competent if it has the ability to acquire, use and sustain the skills and knowledge necessary to carry out architecture-related practices that lead to systems that serve the organization's business goals. This paper presents some principles of architecture competence, based on four models that aid in explaining, measuring, and improving the architecture competence of an individual or an organization with respect to these principles, The principles are based on a set of fundamental beliefs about software architecture.. 1. Introduction When architects within an organization carry out architecture related practices well, this increases the likelihood that the organization produces high-quality architec-tures that are aligned with its business goals. We call these architects \" competent \". However, such practices may be highly dependent on the specific, idiosyncratic skills and personality of the individual architect. When an organization is competent (by our definition), it achieves good results consistently and predictably. We believe that equipping architects with the best tools and methods will contribute to the goal of producing high-quality architec-tures. But more importantly we believe that improving organizational factors is critical to successfully adopting those tools and methods across the enterprise, and hence the key to achieving the full promise of architectures throughout the organization. We are creating an assessment instrument for gauging organizational architectural competence (as distinct from individual competence), so that we can assess the degree to which organizations foster architectural competence, and so that we can guide organizations to become more competent. This involves evaluating not just the individuals in an organization but also the organizational practices that support architecture based development. We adopt the following definition of architecture competence of an organization:","cites":"9","conferencePercentile":"66.66666667"},{"venue":"WICSA","id":"455945c36b9c24080d5ff902655b796818514fe7","venue_1":"WICSA","year":"1999","title":"Attribute-Based Architecture Styles","authors":"Mark H. Klein, Rick Kazman, Leonard J. Bass, S. Jeromy Carrière, Mario Barbacci, Howard F. Lipson","author_ids":"2620930, 1699020, 2040359, 2754273, 1785780, 2978281","abstract":"Architectural styles have enjoyed widespread popularity in the past few years, and for good reason: they represent the distilled wisdom of many experienced architects and guide less experienced architects in designing their architectures. However, architectural styles employ qualitative reasoning to motivate when and under what conditions they should be used. In this paper we present the concept of an ABAS (Attribute-Based Architectural Style) which include a set of components and connectors along with their topology, but which add to this a quality attribute specific model that provides a method of reasoning about the behavior of component types that interact in the defined pattern. We will define ABASs in this paper, show how they are used, and argue for why this extension to the notion of architectural style is an important step toward creating a true engineering discipline of architectural design.","cites":"55","conferencePercentile":"72.72727273"},{"venue":"WICSA","id":"12661a0cb19332eff581b6a79314757d35d955c7","venue_1":"WICSA","year":"2005","title":"Towards an Operational Framework for Architectural Prototyping","authors":"Henrik Bærbak Christensen","author_ids":"2836060","abstract":"We use a case study in architectural prototyping as input for presenting a first, tentative, framework describing key concepts and their relationships in architectural prototyp-ing processes.","cites":"0","conferencePercentile":"13.63636364"},{"venue":"WICSA","id":"1e2bfc372622aeb30524d60291d1d25db6af2eed","venue_1":"WICSA","year":"2007","title":"Risk Themes Discovered through Architecture Evaluations","authors":"Leonard J. Bass, Robert L. Nord, William Wood, David Zubrow","author_ids":"2040359, 2715685, 2575681, 2926465","abstract":"The ideas and findings in this report should not be construed as an official DoD position. It is published in the interest of scientific and technical information exchange. Use of any trademarks in this report is not intended in any way to infringe on the rights of the trademark holder. Internal use. Permission to reproduce this document and to prepare derivative works from this document for internal use is granted, provided the copyright and \"No Warranty\" statements are included with all reproductions and derivative works. External use. Requests for permission to reproduce this document or prepare derivative works of this document for external and commercial use should be addressed to the SEI Licensing Agent. Mellon University for the operation of the Software Engineering Institute, a federally funded research and development center. The Government of the United States has a royalty-free government-purpose license to use, duplicate, or disclose the work, in whole or in part and in any manner, and to have or permit others to do so, for government purposes pursuant to the copyright license under the clause at 252.227-7013. For information about purchasing paper copies of SEI reports, please visit the publications portion of our Web site","cites":"23","conferencePercentile":"80"},{"venue":"WICSA","id":"74151575807bd1c22d7d44cdb0efb961d628608b","venue_1":"WICSA","year":"2004","title":"Architectural Prototyping: An Approach for Grounding Architectural Design and Learning","authors":"Jakob E. Bardram, Henrik Bærbak Christensen, Klaus Marius Hansen","author_ids":"7475687, 2836060, 1781815","abstract":"A major part of software architecture design is learning how specific architectural designs balance the concerns of stakeholders. We explore the notion of \" architectural prototypes \" , correspondingly architectural prototyping, as a means of using executable prototypes to investigate stake-holders' concerns with respect to a system under development. An architectural prototype is primarily a learning and communication vehicle used to explore and experiment with alternative architectural styles, features, and patterns in order to balance different architectural qualities. The use of architectural prototypes in the development process is discussed, and we argue that such prototypes can play a role throughout the entire process. The use of architectural prototypes are illustrated by three distinct cases of creating software systems. We argue that architectural prototyping can provide key insights that may otherwise be difficult to obtain before a system is built. Furthermore, they define skeleton systems that serve as communication means and knowledge transfer among stakeholders.","cites":"24","conferencePercentile":"70"},{"venue":"WICSA","id":"7896f27bded2f5787a46381b5fe9d30e38f33b18","venue_1":"WICSA","year":"2011","title":"The Boomeranged Software Architect","authors":"Rahul Premraj, Gaco Nauta, Antony Tang, Hans van Vliet","author_ids":"2000241, 3151815, 2530426, 3996792","abstract":"—In an agile environment, where the architect's role is not crisply defined, the architect may have to deal with a number of issues that arise during development and are considered architecture-related. Such issues range from feature requests and enhancements through to defects found during testing. Architect specifications that turn into issues boomerang the architect to resolve them. In a case study we looked at issues entered into the issue tracking system that were assigned to architects to understand the root causes for their inception. We found that many of the avoidable issues can be circumvented by better communication between the architect and other stakeholders, and by small adaptations in the development process. I. INTRODUCTION The role of software architects in a project is beyond just the architecture of the software. Kruchten argues that architects should play a key role in coordinating between the design, implementation, and integration teams, in project planning activities, assessing technical risks and devising solutions to mitigate them, and maintaining the architectural integrity of the system [1]. Besides, architecting the software system in itself is non-trivial — it involves understanding the user requirements and translating them into product properties, identifying those that are relevant to architecture, making choices between alternative solutions, prototyping and validating them, etc. As a result, software architects deal with many aspects in development, from requirements to design details. As a result, the boundaries of their roles and responsibilities are not always sharply defined. This is the more so in agile environments where the architecture is not crisply defined early on [2], [3]. In a case study conducted in a large company in the Netherlands (Section II-A), we noted that architectural issues are assigned to software architects to be resolved. These issues are the tickets filed in the project's issue tracking system that are assigned to the architects. They relate to various subject matters including feature requests, enhancements , and defects found during development and testing. Resolving the assigned issues can take up a lot of the architect's time that could be potentially spent elsewhere. Hence, the focus in this study is to perform a retrospective root cause analysis into the issues assigned to the software architect to understand why they arise, what are their types,","cites":"1","conferencePercentile":"17.5"},{"venue":"WICSA","id":"4e2fe21547f7db565609fc3ee4d8beaefbd7f9d1","venue_1":"WICSA","year":"2014","title":"Green Architectural Tactics for the Cloud","authors":"Giuseppe Procaccianti, Patricia Lago, Grace A. Lewis","author_ids":"2123274, 1678652, 1723579","abstract":"—Energy efficiency is a primary concern for the ICT sector. In particular, the widespread adoption of cloud computing technologies has drawn attention to the massive energy consumption of data centers. Although hardware constantly improves with respect to energy efficiency, this should also be a main concern for software. In previous work we analyzed the literature and elicited a set of techniques for addressing energy efficiency in cloud-based software architectures. In this work we codified these techniques in the form of Green Architectural Tactics. These tactics will help architects extend their design reasoning towards energy efficiency and to apply reusable solutions for greener software.","cites":"6","conferencePercentile":"87.5"},{"venue":"WICSA","id":"69455d8bfd86c791a18f9cb3e4a011a0bf620059","venue_1":"WICSA","year":"1999","title":"A Software Architecture Reconstruction Method","authors":"George Yanbing Guo, Joanne M. Atlee, Rick Kazman","author_ids":"2585421, 1790391, 1699020","abstract":"Changes to a software system during implementation and maintenance can cause the architecture of a system to deviate from its documented architecture. If design documents are to be useful, maintenance programmers must be able to easily evaluate how closely the documents conform to the code they are meant to describe. Software architecture recovery, which deals with the extraction and analysis of a system's architecture, has gained more tool support in the past few years. However, there is little research on developing effective and efficient architectural conformance methods. In particular, given the increasing emphasis on patterns and styles in the software engineering community, a method needs to explicitly aid a user in identifying architectural patterns. This paper presents a semi-automatic method, called ARM (Architecture Reconstruction Method), that guides a user in the reconstruction of software architectures based on the recognition of patterns. Once the system's actual architecture has been reconstructed, we can analyze conformance of the software to the documented design patterns. 1. INTRODUCTION A software architecture is a high-level description of a software system's design, often a model of the software's components (e.g., objects, processes, data repositories, etc.), the externally visible properties of those components, and the relationships among them (Bass, et al., 1998). The concept of software architectures has received considerable attention lately, and developers are starting to document software architectures. However, the living architecture of a software system may drift from the documented","cites":"56","conferencePercentile":"81.81818182"},{"venue":"WICSA","id":"5e65d3dc2bb0fbcfe221ebedae62b14c32843445","venue_1":"WICSA","year":"2005","title":"Migration of Supervisory Machine Control Architectures","authors":"Bas Graaf, Sven Weber, Arie van Deursen","author_ids":"3202150, 2022990, 1737202","abstract":"We discuss a first step towards an approach for migration of supervisory machine control (SMC) architectures. This approach is based on the identification of SMC concerns and the definition of corresponding transformation rules.","cites":"2","conferencePercentile":"36.36363636"},{"venue":"WICSA","id":"d5c09d7a476092544c9e2aa413203da136481fe5","venue_1":"WICSA","year":"2002","title":"Understanding and Propagating Architecutural Changes","authors":"Christopher van der Westhuizen, André van der Hoek","author_ids":"1688864, 1739859","abstract":"Like source code, architectures change. The use of product line architectures provides a particularly rich source of changes: new products are introduced, existing products are enhanced and modified, and old products are retired. Methods exist that record these kinds of changes by maintaining explicit representations of the evolution of a product line architecture. Despite the availability of such representations, it still is difficult to quickly gain an understanding of the exact changes that define the difference between two products. Furthermore, it is difficult to automatically propagate such changes to yet another, third product in the product line. This paper aims to fill this void and contributes a set of algorithms and an associated representation for understanding and propagating architectural changes within a product line architecture. The approach is based on xADL 2.0, an extensible representation for product line architectures, and adapts well-known differencing and merging algorithms from the field of configuration management to the domain of software architecture. 1. INTRODUCTION Change is an unavoidable and intrinsic part of any kind of effort involving software architecture. Not only do individual architectures evolve over time, but the advent of product line architectures has brought the problem of managing architectural change to a whole new level [2]. New","cites":"12","conferencePercentile":"50"},{"venue":"WICSA","id":"492e563eba0ce668ec502b01a419a618d4aadff3","venue_1":"WICSA","year":"2007","title":"An Architectural Style for Ajax","authors":"Ali Mesbah, Arie van Deursen","author_ids":"2155776, 1737202","abstract":"reserved. No part of this series may be reproduced in any form or by any means without prior written permission of the publisher. Abstract A new breed of web application, dubbed AJAX, is emerging in response to a limited degree of interactivity in large-grain stateless Web interactions. At the heart of this new approach lies a single page interaction model that facilitates rich in-teractivity. We have studied and experimented with several AJAX frameworks trying to understand their architectural properties. In this paper, we summarize three of these frameworks and examine their properties and introduce the SPIAR architectural style. We describe the guiding software engineering principles and the constraints chosen to induce the desired properties. The style emphasizes user interface component development, and intermediary delta-communication between client/server components, to improve user interac-tivity and ease of development. In addition, we use the concepts and principles to discuss various open issues in AJAX frameworks and application development.","cites":"22","conferencePercentile":"75"},{"venue":"WICSA","id":"501c4862116522d577e6295387ebdc4795b977e4","venue_1":"WICSA","year":"2011","title":"Quantifying the Analyzability of Software Architectures","authors":"Eric Bouwers, José Pedro Correia, Arie van Deursen, Joost Visser","author_ids":"2364689, 3218955, 1737202, 1755164","abstract":"—The decomposition of a software system into components is a major decision in any software architecture, having a strong influence on many of its quality aspects. A system's analyzability, in particular, is influenced by its decomposition into components. But into how many components should a system be decomposed to achieve optimal analyzability? And how should the elements of the system be distributed over those components? In this paper, we set out to find answers to these questions with the support of a large repository of industrial and open source software systems. Based on our findings, we designed a metric which we call Component Balance. In a case study we show that the metric provides pertinent results in various evaluation scenarios. In addition, we report on an empirical study that demonstrates that the metric is strongly correlated with ratings for analyzability as given by experts.","cites":"19","conferencePercentile":"100"},{"venue":"WICSA","id":"b561e917842d563680f5a744cafb27fda982d2a0","venue_1":"WICSA","year":"2008","title":"Teaching Software Architecture Design","authors":"Tomi Männistö, Juha Savolainen, Varvana Myllärniemi","author_ids":"1780606, 1758826, 3207167","abstract":"Teaching software architecture design in an academic course so that it would equip the students with industrially useful capabilities is challenging. The real software architecture design problems are less clear than what the students are used to learning; the existing mass of assets of an industrial environment is hard to bring into a classroom; and so forth. We have designed a special course into an academic software engineering curriculum, taking into account the industrial needs in teaching the problem of understanding and solving demanding software architecture design problems. The course form is similar to an industrial architecture study assigned to a team of architects. In this paper, we discuss the industrial motivation for the course, the development of the course to its current form, and the lessons learned from running the course.","cites":"5","conferencePercentile":"38.0952381"},{"venue":"WICSA","id":"b98244f927e42671dc0361402261c512766f58d7","venue_1":"WICSA","year":"2001","title":"A Highly-Extensible, XML-Based Architecture Description Language","authors":"Eric M. Dashofy, André van der Hoek, Richard N. Taylor","author_ids":"3254577, 1739859, 1711409","abstract":"Software architecture research focuses on models of software architectures as specified in architecture description languages (ADLs). As research progresses in specific areas of software architectures, more and more architectural information is created. Ideally, this information can be stored in the model. An extensible modeling language is crucial to experimenting with and building tools for novel modeling constructs that arise from evolving research. Traditional ADLs typically support a small set of modeling constructs very well, but adapt to others poorly. XML provides an ideal platform upon which to develop an extensible modeling language for software architectures. Previous XML-based ADLs successfully leveraged XML's large base of off-the-shelf tool support, but did not take advantage of its extensibility. To give software architecture researchers more freedom to explore new possibilities and modeling techniques while maximizing reuse of tools and modeling constructs, we have developed xADL 2.0, a highly extensible XML-based ADL. xADL 2.0 supports run-time and design time modeling, architecture configuration management and model-based system instantiation. Additionally, xADL 2.0 has a set of extensible infrastructure tools that support the creation, manipulation, and sharing of xADL 2.0 documents.","cites":"139","conferencePercentile":"90.90909091"}]}