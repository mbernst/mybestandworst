{"WIFT.csv":[{"venue":"WIFT","id":"451d02a715025000bcbd1aa2cab99b3ce3a7f901","venue_1":"WIFT","year":"1995","title":"A formal approach to reactive systems software: a telecommunications application in ESTEREL","authors":"Lalita Jategaonkar Jagadeesan, Carlos Puchol, James Von Olnhausen","author_ids":"2543619, 3133339, 1955255","abstract":"ESTEREL is a formally-defined language designed for programming reactive systems; namely, those that maintain a permanent interaction with their environment. The AT&T 5ESS R telephone switching system is an example of a legacy reactive system. As a case study, we describe an implementation in ESTEREL of one feature of a 5ESS switch; this implementation has been tested in the 5ESS switch sim-ulator. Furthermore, it has been formally verified that this implementation satisfies some safety properties required for telecommunications applications. Our case study provides some evidence that ESTEREL is suitable for programming legacy reactive systems, and that it may afford significant advantages in software development over more traditional programming languages used in industrial settings.","cites":"46","conferencePercentile":"100"},{"venue":"WIFT","id":"8361cdf39ed66c73e7e98561160f7a709a8fb681","venue_1":"WIFT","year":"1998","title":"Formal Methods For Developing High Assurance Computer Systems: Working Group Report","authors":"Mats Per Erik Heimdahl, Constance L. Heitmeyer","author_ids":"8470884, 3093759","abstract":"four diierent discussion groups investigated various topics. This report summarizes the discussions conducted on the topic \\Formal Methods for Developing High Assurance Systems.\" High assurance computer systems are computer systems where convincing evidence is required that the system satisses a collection of critical properties. To operate correctly, these systems must satisfy properties such as safety and security. Examples of high assurance systems include ight control systems, medical systems, and control systems for nuclear plants. In addition, increased reliance on communications is moving many communications systems, such as telephone networks and cellular and satellite communications systems, into the domain of high assurance systems. The aim of the 1998 discussion was to revisit and continue a discussion began in the working group with the same name at the rst WIFT in 1995. A report describing the discussions at WIFT'95 is available at the web site: Advantages: Where and how have formal methods had utility in the development of high assurance systems? Barriers: What are the major barriers to applying formal methods in the development of high assurance systems? Strategies for Success: How can we obtain an industrial-strength process for developing high assurance computer systems? Due to time constraints, some topics scheduled for discussion at WIFT'95 never were addressed. The goal of the WIFT'98 discussion was to revisit the above topics and also to address the following: Uses of Formal Methods: How are formal methods being used in the development of high assurance systems? Overcoming the barriers: How can the barriers to widespread use of formal methods be overcome? The summary below is organized around these two topics and roughly follows the ow of the discussion in the group. A formal method may be described as an approach to developing computer systems that includes 1) a notation with a well-deened syntax and semantics, 2) some guidelines and procedures for using the notation, and 3) techniques for analyzing speciications expressed in the notation. Traditionally, formal methods have been used for formal speciication and formal veriication. Recently, the use of formal methods for refutation has also gained widespread use in some segments of industry. Formal speciication of the required system behavior has many beneets. For example, a formal speciication is unambiguous and precise, can be checked for syntactic correctness, and can help ensure that a speciication is well-formed. A formal speciication enables formal veriication. In formal veriication, a proof is constructed, often with mechanical support, …","cites":"9","conferencePercentile":"25"},{"venue":"WIFT","id":"c0532000d776c495fbeec7bf520fe75fc65e2121","venue_1":"WIFT","year":"1998","title":"Using the SCR* Toolset to Specify Software Requirements","authors":"Constance L. Heitmeyer","author_ids":"3093759","abstract":"1. Background Formulated in the late 1970s to specify the requirements of the Operational Flight Program (OFP) of the A-7 aircraft 8], the SCR (Software Cost Reduction) requirements method is a method based on tables for specifying the requirements of software systems. During the 1980s and the early 1990s, many companies, including Bell Laboratories, Grumman, Ontario Hydro, and Lockheed, applied the SCR requirements method to practical systems. Each of these applications of SCR had, at most, weak tool support. To provide powerful, robust tool support customized for the SCR method, we have developed the SCR* toolset. To provide formal underpinnings for the method, we have also developed a formal model which deenes the semantics of SCR requirements speciications. In SCR, monitored and controlled variables represent environmental quantities that the system monitors and controls 7]. The environment nondeterministically produces a sequence of input events, where an input event is a change in some monitored quantity. The system responds to each input event in turn by changing state and possibly changing one or more controlled quantities. The SCR formal model, a special case of the classic state machine model, represents a system as a 4-tuple, (S; S 0 ; E m ; T), where S is a set of states, S 0 S is the initial state set, E m is the set of input events, and T is a function describing the allowed state transitions 7]. T is a composition of simpler functions derived from the tables in an SCR speciication. The formal model requires each table to satisfy certain properties. These properties guarantee that each table describes a total function. To specify the system requirements concisely, the SCR method uses mode classes, conditions , and events. A mode class organizes the system states into equivalence classes, each called a mode. The SCR model includes a set RF containing the names of all variables (e.g., monitored and controlled variables, mode classes) in a given speciication and a type function TY mapping each variable in RF to a set of values. In the model, a state is a function mapping each variable r in RF to its value in TY(r), a condition is a predicate deened on a state, and an event is a predicate deened on two states when any state variable changes. 3. The SCR Tools SCR* is an integrated suite of tools supporting the SCR requirements method. It includes …","cites":"10","conferencePercentile":"37.5"}]}