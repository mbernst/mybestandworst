{"WODA.csv":[{"venue":"WODA","id":"2148880e2c9ae5980c1dd117284f91b9b0dc8610","venue_1":"WODA","year":"2008","title":"Dynamic detection of event handlers","authors":"Steven P. Reiss","author_ids":"1684347","abstract":"This paper considers the problem of dynamically finding event handlers in a running application using information obtained from periodic stack samples. Knowing the set of event handlers in an application is a prerequisite to building a model of the event behavior of the application which is in turn needed to do performance analysis, program visualization, or program understanding in terms of events. We show that a trie-based statistical technique can effectively and accurately find event handlers.","cites":"1","conferencePercentile":"18.18181818"},{"venue":"WODA","id":"68e5e91b43544ce7d8124822909d99a6ed1c108e","venue_1":"WODA","year":"2008","title":"An observation-based model for fault localization","authors":"Rui Abreu, Peter Zoeteweij, Arjan J. C. van Gemund","author_ids":"8689649, 1747348, 1686060","abstract":"Automatic techniques for helping developers in finding the root causes of software failures are extremely important in the development cycle of software. In this paper we study a dynamic modeling approach to fault localization, which is based on logic reasoning over program traces. We present a simple diagnostic performance model to assess the influence of various parameters, such as test set size and coverage, on the debugging effort required to find the root causes of software failures. The model shows that our approach unambiguously reveals the actual faults, provided that sufficient test cases are available. This optimal diagnostic performance is confirmed by numerical experiments. Furthermore, we present preliminary experiments on the diagnostic capabilities of this approach using the single-fault Siemens benchmark set. We show that, for the Siemens set, the approach presented in this paper yields a better diagnostic ranking than other well-known techniques.","cites":"22","conferencePercentile":"100"},{"venue":"WODA","id":"2fa0d0bd415148c6e7cc4875a5ad26a081745fe2","venue_1":"WODA","year":"2011","title":"Sloppy Python: using dynamic analysis to automatically add error tolerance to ad-hoc data processing scripts","authors":"Philip J. Guo","author_ids":"2251384","abstract":"Programmers and data analysts get frustrated when their long-running data processing scripts crash without producing results, due to either bugs in their code or inconsistencies in data sources. To alleviate this frustration, we developed a dynamic analysis technique that guarantees scripts will never crash: It converts all uncaught exceptions into special NA (<b>N</b>ot <b>A</b>vailable) objects and continues executing rather than crashing. Thus, imperfect scripts will run to completion and produce partial results and an error log, which is more informative than simply crashing with no results. We implemented our technique as a \"Sloppy\" Python interpreter that automatically adds error tolerance to existing scripts without any programmer effort or run-time slowdown.","cites":"2","conferencePercentile":"78.57142857"}]}