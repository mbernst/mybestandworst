{"WOLFHPCSC.csv":[{"venue":"WOLFHPC@SC","id":"2d0191fcdb22ff990faa68983b177228bf9b21cf","venue_1":"WOLFHPC@SC","year":"2015","title":"Enhancing domain specific language implementations through ontology","authors":"Chunhua Liao, Pei-Hung Lin, Daniel J. Quinlan, Yue Zhao, Xipeng Shen","author_ids":"7604095, 1905021, 1692335, 1695765, 1798465","abstract":"Domain specific languages (DSLs) offer an attractive path to program large-scale, heterogeneous parallel computers since application developers can leverage high-level annotations defined by DSLs to efficiently express algorithms without being distracted by low-level hardware details. However, performance of DSL programs heavily relies on how well a DSL implementation, including compilers and runtime systems, can exploit knowledge across multiple layers of software/hardware environments for optimizations. The knowledge ranges from domain assumptions, high-level DSL semantics, to low-level hardware features. Traditionally, such knowledge is either implicitly assumed or represented using ad-hoc approaches, including narrative text, source-level annotations, or customized software and hardware specifications in high performance computing (HPC). The lack of a formal, uniform, extensible, reusable and scalable knowledge management approach is becoming a major obstacle to efficient DSLs implementations targeting fast-changing parallel architectures.\n In this paper, we present a novel DSL implementation paradigm using an ontology-based knowledge base to formally and uniformly exploit the knowledge needed for optimizations. An ontology is a formal and explicit knowledge representation to describe concepts, properties, and individuals in a domain. During the past decades, a wide range of ontology standards and tools have been developed to help users capture, share, utilize and reason domain knowledge. Using modern ontology techniques, we design a knowledge base capturing concepts and properties of a problem domain, DSL programs, and hardware architectures. Compiler interfaces are also defined to allow interactions with the knowledge base to assist program analysis, optimization and code generation. Our preliminary evaluation using stencil computation shows the feasibility and benefits of our approach.","cites":"0","conferencePercentile":"50"},{"venue":"WOLFHPC@SC","id":"5e64931129ed2bff8236c3e93f710200616edc2c","venue_1":"WOLFHPC@SC","year":"2014","title":"Exploring the construction of a domain-aware toolchain for high-performance computing","authors":"Patrick S. McCormick, Christine Sweeney, Nick Moss, Dean Prichard, Samuel K. Gutierrez, Kei Davis, Jamaludin Mohd-Yusof","author_ids":"2209851, 2309953, 2182823, 2046201, 2673238, 2961322, 2574661","abstract":"The push towards exascale computing has sparked a new set of explorations for providing new productive programming environments. While many efforts are focusing on the design and development of domain-specific languages (DSLs), few have addressed the need for providing a fully domain-aware toolchain. Without such domain awareness critical features for achieving acceptance and adoption, such as debugger support, pose a long-term risk to the overall success of the DSL approach. In this paper we explore the use of language extensions to design and implement the <i>Scout</i> DSL and a supporting toolchain infrastructure. We highlight how language features and the software design methodologies used within the toolchain play a significant role in providing a suitable environment for DSL development.","cites":"2","conferencePercentile":"62.5"}]}