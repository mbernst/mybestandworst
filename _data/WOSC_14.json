{"WOSC_14.csv":[{"venue":"WOSC '14","id":"adf8eb8c660f46ba6d7142c18390a0d662f9c7d4","venue_1":"WOSC '14","year":"2014","title":"An Extensible Framework for Composing Stencils with Common Scientific Computing Patterns","authors":"Leonard Truong, Chick Markley, Armando Fox","author_ids":"1802479, 3409627, 1736156","abstract":"The SEJITS framework supports creating embedded domain-specific languages (DSELs) and code generators, a pair of which is called a <i>specializer</i>, with much less effort than creating a full DSL compiler---typically just a few hundred lines of code. SEJITS' main benefit is allowing application writers to stay entirely in high-level languages such as Python by using specialized Python functions (that is, functions written in one of the Python-embedded DSELs) to generate code that runs at native speed. One existing SEJITS DSEL is Sepya [10], a Python DSEL for stencil computations that generates OpenMP and Cilk+ code competitive with existing DSL compilers such as Pochoir and Halide. We extend Sepya to generate OpenCL code for targetting GPUs, and in the process, extend SEJITS with support for <i>meta-specializers</i>, whose job is to enable and optimize the composition of existing specializers written by third parties. In this work, we demonstrate meta-specialization by detecting and removing extraneous data copies to and from the GPU to compose multiple specializer calls (stencil and non-stencil). We also explore the variants of loop fusion to further improve performance of composing these operations. The performance of the generated stencil code is 20x faster SciPy and competitive with existing stencil DSELs on realistic code excerpts. Since meta-specializers must compose and optimize specializers created by third parties, we extend SEJITS with support for meta-specializer hooks, allowing existing specializers to be incrementally enabled for meta-specialization without breaking backwards compatibility. The Sepya and SEJITS extensions together extend the range of platforms for which highly optimized code can be generated and open new possibilities for optimizing the composition of existing specializers.","cites":"0","conferencePercentile":"31.25"}]}