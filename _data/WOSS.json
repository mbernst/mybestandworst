{"WOSS.csv":[{"venue":"WOSS","id":"ded8f8e47e8205473059a845f1b214173fb62c0d","venue_1":"WOSS","year":"2004","title":"Self-managed decentralised systems using K-components and collaborative reinforcement learning","authors":"Jim Dowling, Vinny Cahill","author_ids":"2896676, 1687186","abstract":"Components in a decentralised system are faced with uncertainty as how to best adapt to a changing environment to maintain or optimise system performance. How can individual components learn to adapt to recover from faults in an uncertain environment? How can a decentralised system coordinate the adaptive behaviour of its components to realise system optimisation goals given problems establishing consensus in dynamic environments? This paper introduces a self-adaptive component model, called K-Components, that enables individual components adapt to a changing environment and a decentralised coordination model, called collaborative reinforcement learning, that enables groups of components to learn to collectively adapt their behaviour to establish and maintain system-wide properties in a changing environment.","cites":"17","conferencePercentile":"81.81818182"},{"venue":"WOSS","id":"a323e7db502d0d0ea24c1a72de645da251aeff03","venue_1":"WOSS","year":"2004","title":"Task-based self-adaptation","authors":"David Garlan, Vahe Poladian, Bradley R. Schmerl, João Pedro Sousa","author_ids":"1775949, 2798286, 1779234, 1688217","abstract":"Recently there has been increasing interest in developing systems that can adapt dynamically to cope with changing environmental conditions and unexpected system errors. Most efforts for achieving self-adaptation have focused on the mechanisms for detecting opportunities for improvement and then taking appropriate action. However, such mechanisms beg the question: what is the system trying to achieve? In a given situation there may be many possible adaptations, and knowing which one to pick is a difficult question. In this paper we advocate the use of explicit representation of user task as a critical element in addressing this missing link.","cites":"21","conferencePercentile":"86.36363636"},{"venue":"WOSS","id":"8d4786572bea22d78de1f18f447b41914ba68742","venue_1":"WOSS","year":"2004","title":"Combining statistical monitoring and predictable recovery for self-management","authors":"Armando Fox, Emre Kiciman, David A. Patterson","author_ids":"1736156, 1754874, 1701130","abstract":"Complex distributed Internet services form the basis not only of e-commerce but increasingly of mission-critical network-based applications. What is new is that the workload and internal architecture of three-tier enterprise applications presents the opportunity for a new approach to keeping them running in the face of many common recoverable failures. The core of the approach is anomaly detection and localization based on statistical machine learning techniques. Unlike previous approaches, we propose anomaly detection and pattern mining not only for operational statistics such as mean response time, but also for <i>structural</i> behaviors of the system---what parts of the system, in what combinations, are being exercised in response to different kinds of external stimuli. In addition, rather than building baseline models <i>a priori</i>, we extract them by observing the behavior of the system over a short period of time during normal operation. We explain the necessary underlying assumptions and why they can be realized by systems research, report on some early successes using the approach, describe benefits of the approach that make it competitive as a path toward self-managing systems, and outline some research challenges. Our hope is that this approach will enable \"new science\" in the design of self-managing systems by allowing the rapid and widespread application of statistical learning theory techniques (SLT) to problems of system dependability.","cites":"16","conferencePercentile":"75"},{"venue":"WOSS","id":"1461bccc498a185d4700a4343500f1751bcd8dd0","venue_1":"WOSS","year":"2002","title":"A case study in software adaptation","authors":"Giuseppe Valetto, Gail E. Kaiser","author_ids":"1703915, 1694056","abstract":"We attach a feedback-control-loop infrastructure to an existing target system, to continually monitor and dynamically adapt its activities and performance. (This approach could also be applied to \"new\" systems, as an alternative to \"building in\" adaptation facilities, but we do not address that here.) Our infrastructure consists of multiple layers, with the objectives of 1. probing, measuring and reporting of activity and state during the execution of the target system among its components and connectors; 2. gauging, analysis and interpretation of the reported events; and 3. whenever necessary, feedback onto the probes and gauges, to focus them (e.g., drill deeper), or onto the running target system, to direct its automatic adjustment and reconfiguration. We report on our successful experience using this approach in the dynamic adaptation of a large-scale commercial application requiring both coarse and fine-grained modifications.","cites":"21","conferencePercentile":"52.63157895"},{"venue":"WOSS","id":"cb2cb5df36c3c9aa64631fb2d12d046609957707","venue_1":"WOSS","year":"2002","title":"Reflection, self-awareness and self-healing in OpenORB","authors":"Gordon S. Blair, Geoff Coulson, Lynne Blair, Hector A. Duran-Limon, Paul Grace, Rui S. Moreira, Nikos Parlavantzas","author_ids":"1700173, 1696978, 2724976, 1806402, 2431136, 2354372, 2525163","abstract":"There is a growing interest in the area of self-healing systems. Self-healing does however impose considerable demands on system infrastructures---especially in terms of openness and support for reconfigurability. This paper proposes that the self-awareness inherent in reflective technologies lends itself well to the construction of self-healing systems. In particular, the paper examines the support provided by the Open ORB reflective middleware technology for the construction of this increasingly important class of system.","cites":"52","conferencePercentile":"84.21052632"},{"venue":"WOSS","id":"40a8c05115f547263af3688b971a1fcb3ab34e5a","venue_1":"WOSS","year":"2002","title":"Architecture-centric programming for adaptive systems","authors":"Jonathan Aldrich, Vibha Sazawal, Craig Chambers, David Notkin","author_ids":"2891455, 1722797, 4649910, 1727679","abstract":"Ubiquitous computing services are a fast-growing and challenging class of self-healing systems that must adapt to constant failures and environmental changes. Writing robust ubiquitous computing code is difficult in current programming systems. The architecture, interfaces, and logic of the program are often obscured by infrastructure details, making the development and evolution of these systems difficult and error-prone.We are exploring whether implementation language support for software architecture can aid in the development and evolution of ubiquitous computing systems. One such approach, embodied in the ArchJava language, allows programmers to express the software architecture of an application within Java source code. In this paper, we propose an extension to ArchJava allowing programmers to define custom connectors. Custom connectors are useful in many different contexts; we show how they can be used to implement part of the PlantCare ubiquitous computing application in ArchJava.","cites":"7","conferencePercentile":"34.21052632"},{"venue":"WOSS","id":"09f52a2b71a760abab08a92fad2b04906c5d4416","venue_1":"WOSS","year":"2002","title":"Towards architecture-based self-healing systems","authors":"Eric M. Dashofy, André van der Hoek, Richard N. Taylor","author_ids":"3254577, 1739859, 1711409","abstract":"Our approach to creating self-healing systems is based on software architecture, where repairs are done at the level of a software system's components and connectors. In our approach, event-based software architectures are targeted because they offer significant benefits for run-time adaptation. Before an automated planning agent can decide how to repair a self-healing system, a significant infrastructure must be in place to support making the planned repair. Specifically, the self-healing system must be built using a framework that allows for run-time adaptation, there must be a language in which to express the repair plan, and there must be a reconfiguration agent that can execute the repair plan once it is created. In this paper, we present tools and methods that implement these infrastructure elements in the context of an overall architecture-based vision for building self-healing systems. The paper concludes with a gap analysis of our current infrastructure vs. the overall vision, and our plans for fulfilling that vision.","cites":"106","conferencePercentile":"89.47368421"}]}