{"WRTOOPSLA.csv":[{"venue":"WRT@OOPSLA","id":"0bbb65ce046226f03c9d20a8ce724c39cbd419ef","venue_1":"WRT@OOPSLA","year":"2008","title":"Gathering refactoring data: a comparison of four methods","authors":"Emerson R. Murphy-Hill, Andrew P. Black, Danny Dig, Chris Parnin","author_ids":"1695992, 2091683, 1687704, 1765101","abstract":"Those of us who seek to build better refactoring tools need empirical data collected from real refactoring sessions. The literature reports on different methods for capturing this data, but little is known about how the method of data capture affects the quality of the results. This paper describes 4 methods for drawing conclusions about how programmers refactor, characterizes the assumptions made by each, and presents a family of experiments to test those assumptions. We hope that the results of the experiments will help future researchers choose a data-collection method appropriate to the question that they want to investigate.","cites":"15","conferencePercentile":"95.83333333"},{"venue":"WRT@OOPSLA","id":"2269d62dbd779d280cbfac9d1ac40fbe8f278ab8","venue_1":"WRT@OOPSLA","year":"2008","title":"Toward refactoring in a polyglot world: extending automated refactoring support across Java and XML","authors":"Nicholas Chen, Ralph E. Johnson","author_ids":"1873400, 7137519","abstract":"Many automated refactoring tools only work with one programming language. However, most complex programs rely on polyglot programming --- entailing the use of different programming languages, libraries and frameworks. While finding a <i>general</i> solution for extending refactoring across multiple languages is <i>hard</i>, it is <i>simple</i> and <i>possible</i> to support automated refactorings for some common cases that programmers already encounter in their programs today. Supporting those common cases is essential in encouraging programmers to make changes that would increase the understandability and maintainability of their programs.\n This paper is a step toward encouraging tool developers to think about supporting multi-language refactorings. We present our tool for supporting multi-language refactorings from studying the interactions between Java and XML configuration files. Our tool extends <i>Rename Refactoring</i> support across three different popular Java frameworks: Struts, Hibernate and Spring.","cites":"8","conferencePercentile":"75"},{"venue":"WRT@OOPSLA","id":"4918244b15f5881ac8cacc87929748395c770211","venue_1":"WRT@OOPSLA","year":"2008","title":"When refactoring acts like modularity: keeping options open with persistent condition checking","authors":"Macneil Shonle, William G. Griswold, Sorin Lerner","author_ids":"2562746, 6980007, 1806000","abstract":"Oftentimes the changes required to improve the design of code are crosscutting in nature and thus easier to perform with the assistance of automated refactoring tools. However, the developers of such refactoring tools cannot anticipate every practical transformation, particularly those that are specific to the program's domain. We demonstrate Arcum, a declarative language for describing and performing both general and domain-specific transformations.\n Because Arcum works directly with declarative descriptions of crosscutting code it can ensure that code written or modified after the transformation also satisfies the design's requirements. As a result, preconditions and postconditions are persistently checked, making the crosscutting code (such as the use of a design idiom or programming style) behave more like a module with respect to checkability and substitutability. Bringing such capabilities into the IDE allows for code to be decomposed closer to the programmer's intentions and less coupled to specific implementations.","cites":"4","conferencePercentile":"58.33333333"}]}