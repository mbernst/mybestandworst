{"WS-FM.csv":[{"venue":"WS-FM","id":"07f25128463b332f9bee49dd0f60dda21397203f","venue_1":"WS-FM","year":"2007","title":"Modeling Web Service Interactions Using the Coordination Language Reo","authors":"Samira Tasharofi, Mohsen Vakilian, Roshanak Zilouchian Moghaddam, Marjan Sirjani","author_ids":"2106973, 2488532, 1680427, 1709574","abstract":"In this paper we propose an approach to derive the formal semantics of WS-BPEL processes compositionally using Reo and constraint automata. We map each WS-BPEL process into a Reo circuit and then construct the corresponding constraint automaton which shows the behavior of the process. The constraint automaton can be used for analyzing the process behavior. Our work covers the core part of the WS-BPEL language including basic and structured activities, correlation sets, variables, and links.","cites":"7","conferencePercentile":"33.33333333"},{"venue":"WS-FM","id":"79c3fb3dc7e73de0421ae95dc8859c75ae1442ae","venue_1":"WS-FM","year":"2010","title":"Introducing the Guard-Stage-Milestone Approach for Specifying Business Entity Lifecycles","authors":"Richard Hull, Elio Damaggio, Fabiana Fournier, Manmohan Gupta, Fenno Terry Heath, Stacy Hobson, Mark H. Linehan, Sridhar Maradugu, Anil Nigam, Noi Sukaviriya, Roman Vacul√≠n","author_ids":"1746861, 2574723, 2980937, 2137138, 2462598, 2743593, 3100421, 2498511, 2694725, 2745456, 1790082","abstract":"Business process management, workflow, and case management are critical technologies for managing collections of services, including human activities , to support business operations. One way to manage business operations is based on business entities with lifecycles (BEL's) (a.k.a. business artifacts), i.e., key conceptual entities that are central to guiding the operations of a business , and whose content changes as they move through those operations. A BEL type includes both an information model that captures, in either materialized or virtual form, all of the business-relevant data about entities of that type, and a lifecycle model, that specifies the possible ways that an entity of this type might progress through the business. Most previous work on BEL's has been based on the use of lifecycle models based on variants of finite state machines. This paper introduces the Guard-Stage-Milestone (GSM) meta-model for lifecycles, which is an evolution of the previous work on BEL's. GSM lifecycles are substantially more declarative than the finite state machine variants, and support hierarchy and parallelism within a single entity instance. The GSM operational semantics are based on a form of Event-Condition-Action (ECA) rules. This paper provides an informal, preliminary introduction to the GSM approach, and briefly overviews selected research directions.","cites":"34","conferencePercentile":"100"},{"venue":"WS-FM","id":"9b8ee2162f2ffcdfb62acd08f51e90515cb6432e","venue_1":"WS-FM","year":"2012","title":"Formal Modeling and Analysis of the REST Architecture Using CSP","authors":"Xi Wu, Yue Zhang, Huibiao Zhu, Yongxin Zhao, Zailiang Sun, Peng Liu","author_ids":"1784900, 1704873, 2848844, 6784907, 3311839, 1712572","abstract":"Rapidly development of the RESTful systems brings the misunderstanding and misapplied of the REST architecture. Make a better understanding of REST architecture from the perspective of formal methods to guide the implementations of the RESTful systems. First proposed by Roy Fielding in 2000. Design for largescale distributed hypermedia systems such as World Wide Web (www). Make it clear that a web architecture can be obtained by characterizing and constraining the micro-interactions of the components of the architecture. The REST architectural elements include components, connectors and data elements. Components: user agent, origin server and intermediary components (proxy and gateway). The Constraints of REST Six REST constraints as described in Table 1. Table 1. The Descriptions of REST Constraints Constraint Description Client-Server Clients and servers can evolve independently. Stateless Servers do not store session states and each request contains all the information it needs. Cacheable If a data response is cacheable, it can be stored in a client cache for reusing. Layered The architecture can be composed of hierarchical layers and each component cannot interact with others beyond the immediate layer. Uniform Interface Simplify the architecture and enable the components to evolve independently. Code-On-Demand Client functionality to be extended by downloading and executing code in the form of applets or scripts.","cites":"1","conferencePercentile":"33.33333333"}]}