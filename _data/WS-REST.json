{"WS-REST.csv":[{"venue":"WS-REST","id":"1c1e028a939442ed14344003d9a02f622fe34958","venue_1":"WS-REST","year":"2011","title":"Teaching old services new tricks: adding HATEOAS support as an afterthought","authors":"Olga Liskin, Leif Singer, Kurt Schneider","author_ids":"1765703, 1823705, 1724127","abstract":"<i>Hypermedia as the Engine of Application State</i>, or <i>HATEOAS</i>, is one of the constraints of the REST architectural style. It requires service responses to link to the next valid application states. This frees clients from having to know about all the service's URLs and the details of its domain application protocol.\n Few services support HATEOAS, though. In most cases, client programmers need to duplicate business logic and URL schemas already present in the service. These dependencies result in clients that are more likely to break when changes occur. But existing services cannot be easily updated to support HATEOAS: Clients could cease working correctly when a service is changed. Also, client developers might not have access to the service's source code, be it for technical or political reasons.\n We discuss which information is needed to create a HATEOAS-compliant wrapper service for an existing service. We include a notation for modeling possible application states and transitions based on UML State Charts. We demonstrate the feasibility and advantages of our approach by comparing the clients for an existing service and its wrapped counterpart. Our approach enables client developers to wrap third-party services behind an HATEOAS-compliant layer. This moves the tight coupling away from potentially many clients to a single wrapper service that may easily be regenerated when the original service changes.","cites":"3","conferencePercentile":"54.54545455"},{"venue":"WS-REST","id":"3c24ce706a4fc130d1d844f42a2cd9deb20c0414","venue_1":"WS-REST","year":"2012","title":"Composition of engineering web services with universal distributed data-flows framework based on ROA","authors":"Kewei Duan, Julian Padget, H. Alicia Kim, Hiroshi Hosobe","author_ids":"2922570, 3015729, 2939208, 1710423","abstract":"The problem of staging data in workflows has received much attention over the last decade, with a variety of user-directed and automatic solutions. The latter are the focus of the first contribution in this paper, where we propose a simple peer-to-peer solution adapted to the needs of RESTful services. The second contribution, is the combination of the data staging mechanism with a simple service deployment mechanism, that is designed to allow applications developed for the command-line to function as (RESTful) services without modification or (in some cases) recompilation. Thus, the aim of this paper is to describe the design and implementation of: (i) a peer-to-peer data-staging mechanism, that is itself RESTful, and (ii) a service deployment mechanism, also following REST design principles, which together form the Universal Distributed Data-flows framework, for the support of data-intensive (RESTful) workflows. We evaluate the framework by means of an engineering workflow developed for multi-disciplinary design optimization. The workflow itself is specified in Taverna, which is a conventional centralized data-staging enactment system. However, by virtue of the underlying services and staging mechanisms described here, the resulting enactment is peer-to-peer (for data), which furthermore permits asynchronous staging, with potential benefits for network utilization and end-to-end execution time.","cites":"1","conferencePercentile":"50"},{"venue":"WS-REST","id":"62573632dba0cb0089f0eda822499ad76b7c293e","venue_1":"WS-REST","year":"2012","title":"Experiences designing hypermedia-driven and self-adaptive web-based AR authoring tools","authors":"Vlad Stirbu, Yu You","author_ids":"2131228, 8063525","abstract":"In this paper we present our experiences on developing generic and adaptive web-based content authoring tools for augmented and mixed reality applications. Our approach uses hypermedia to convey the capabilities of content servers and to load on demand only the functionality needed to interact with the corresponding content server. The mechanism allows the web application to provide an optimized user experience by adapting to the environment where it is used.","cites":"0","conferencePercentile":"22.22222222"},{"venue":"WS-REST","id":"60e87dd4535b81043f99c126bbe60d7bccafb8f6","venue_1":"WS-REST","year":"2010","title":"Developing a ReSTful mixed reality web service platform","authors":"Petri Selonen, Petros Belimpasakis, Yu You","author_ids":"1800358, 2775134, 8063525","abstract":"This paper discusses the development of a ReSTful Web Service platform for serving Mixed Reality content at Nokia Research Center. The paper gives an overview of the Mixed Reality domain, the requirements for the platform and its implementation. We further outline a method for developing resource oriented web services, beginning with high-level requirements, formalizing them as UML models and refining them to a ReSTful API specification. The approach is demonstrated with detailed examples of designing one particular API subset for Mixed Reality annotations.","cites":"1","conferencePercentile":"22.72727273"}]}