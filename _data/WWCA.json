{"WWCA.csv":[{"venue":"WWCA","id":"9c4a1f43831bb2653ef3b8f75f40b5e0d1e5de50","venue_1":"WWCA","year":"1998","title":"A Network Architecture for Continuous Mobility","authors":"Keisuke Uehara, Takamichi Tateoka, Yasuhito Watanabe, Hideki Sunahara, Osamu Nakamura, Jun Murai","author_ids":"1899844, 2515922, 2507107, 1777145, 3350024, 8567675","abstract":"A system architecture for continuous mobility of Internet-connected computers is designed and proposed. The architecture considers network transparency, geographical location transparency, and performance transparency, with strong support for mapping between an identier space of the Internet and geographical location information. The architecture is dened by 1) identier space support functions, 2) continuous Internet connectivity functions, and 3) performance transparency functions. Two experimental systems are implemented based on the architecture and are tested. The systems achieve continuous mobility in practical environments for automobiles connecting to the Internet, and in classrooms with about 40 roaming students.","cites":"0","conferencePercentile":"21.42857143"},{"venue":"WWCA","id":"54d8ce4818c0990ab8413603f0fcc6126f79c1df","venue_1":"WWCA","year":"1998","title":"Environment Server: A System Support for Adaptive Distributed Applications","authors":"Tatsuo Nakajima, Hiroyuki Aizu, Masaru Kobayashi, Kenji Shimamoto","author_ids":"2846273, 2887182, 3200398, 7953600","abstract":"Various new types of applications can be available in future computing environments such as mobile computing environments and ubiquitous computing environments. The applications may change our daily life dramatically since computers can be embedded in our daily nec-essaries such as televisions, microwaves, cameras, and air conditioners. In these environments, computing environments can be changed dramatically , and applications may be migrated among computers that have drastically dierent hardware congurations. Therefore, these applications should be adapted to various computing environments that may have dramatically dierent characteristics for their ecient executions, and the adaptation requires that the applications can access information about computing environments through a uniform interface. In this paper, we propose an environment server that is important as a basic infrastructure for building adaptive applications for future computing environments. The environment server manages various information about computing environments in an integrated fashion, and applications can access these information through its well dened interface. This makes it possible to build adaptive applications with a systematic framework.","cites":"6","conferencePercentile":"57.14285714"},{"venue":"WWCA","id":"fe5b78b6e39a4cbdd8a6a6023ae2d5dd36b41df6","venue_1":"WWCA","year":"1997","title":"Robust Hist Mobility Supports for Adaptive Mobile Applications","authors":"Akihiro Hokimoto, Tatsuo Nakajima","author_ids":"3307152, 2846273","abstract":"Service proxy framework is a framework for constructing adap-tive mobile applications based on the client-mediator-server architecture. The goal of our framework is to provide an infrastructure for building adaptive mobile applications. Using the service proxy framework, an application can change its behavior when the operational environment is changed dynamically. This paper presents host mobility supports for the service proxy framework. In our approach, a mobile application can be dynamically adapted to the characteristics of underlying networks when the hando of a mobile host occurs. We especially focus on a robust hando protocol for mobile applications using the service proxy framework .","cites":"2","conferencePercentile":"35.71428571"},{"venue":"WWCA","id":"8ffee873dec4c5980cb39849664b03ad70b9db19","venue_1":"WWCA","year":"1997","title":"Engineering Component-Based Systems with Distributed Object Technology","authors":"Kurt C. Wallnau, Edwin J. Morris, Peter H. Feiler, Anthony N. Earl, Emile Litvak","author_ids":"1741041, 1727318, 1740797, 2584669, 2090038","abstract":"Distributed object technology (DOT) is the synthesis of object technology and distributed systems technology. While there is no universal approach to this synthesis, a number of technologies have emerged: SunSoft's Java, Microsoft's DCOM, and OMG's CORBA, to name just a few. The recent explosion of the worldwide web has given impetus to the adoption of DOT. In this paper we survey a broad range of implications concerning the use of DOT for integrating systems from large-scale software components. We discuss the architectural implications of DOT in terms of design patterns and middleware, and highlight the pragmatics of encapsulating components with DOT. We describe recent experiments we have conducted concerning interoperation among different DOTS. Finally, we outline some techniques that we have found to be useful for keeping abreast of the quickening developments in DOT. Distributed object technology (DOT)—the marriage of object technology with distributed systems technology—represents a significant advance in software technology. The recent emergence of the worldwide-web—web browsers and open protocols such as HTTP, has given added impetus to the adoption of DOT. It is our belief that the synthesis of technologies such as objects, distribution, hypertext, open protocols and browsers will continue over the next few years, and promises to revolutionize the kinds of large-scale software applications that we develop, and the way in which we design and implement them. In this paper we focus attention on the impact of DOT on the development of component based systems (CBS)[1]. In our work, component-based systems are those systems that are predominantly assembled from off-the-shelf components, where these components: exhibit significant aggregate functionality and complexity (e.g., database management systems, geographic information systems); are regarded as black boxes for integration purposes; and execute in heterogeneous environments. Distributed object technology is important for CBS because it: • enables us to embrace design concepts that are more powerful than functional approaches typically used when integrating off-the-shelf components; • has a profound impact on re-engineering decisions concerning re-implementation vs. restructuring by encapsulation of components; • directly addresses technical issues of distribution and heterogeneity that are central to our conception of CBS.","cites":"6","conferencePercentile":"85.71428571"}]}