{"WaSABiISWC.csv":[{"venue":"WaSABi@ISWC","id":"b3f2383d9749cae0ab303ff131b7e8cc7d1f89be","venue_1":"WaSABi@ISWC","year":"2013","title":"Boosting RDF Adoption in Ruby with Goo","authors":"Manuel Salvadores, Paul R. Alexander, Ray W. Fergerson, Natalya Fridman Noy, Mark A. Musen","author_ids":"1709857, 2048024, 3293525, 2105209, 8691132","abstract":"For the last year, the BioPortal team has been working on a new iteration that will incorporate major modifications to the existing services and architecture. As part of this work, we transitioned BioPortal to an architecture where RDF is the main data model and where triple stores are the main database systems. We have a component (called \" Goo \") that interacts with RDF data using SPARQL, and provides a clean API to perform CRUD operations on RDF stores. Using RDF and SPARQL for a real-world large-scale application creates challenges in terms of both scalability and technology adoption. In BioPortal, Goo helped us overcome that barrier using the technology that developers were familiar with, an ORM-alike API. 1 Why Goo? Why a Framework? BioPortal, developed in our laboratory, provides access to semantic artifacts such as ontologies [9]. Our team has developed a new iteration of the BioPortal REST API and related infrastructure. The most significant architectural change is the replacement of the backend systems with an RDF triplestore. This single RDF triplestore replaces a variety of custom database schemas that were used to represent ontologies originated in different languages. The BioPortal REST API provides search across all ontologies in its collection , a repository of automatically and manually generated mappings between classes in different ontologies, ontology reviews, new term requests, and discussions generated by the ontology users in the community [9]. Most importantly, our API provides uniform access to the terminologies regardless of the language used to develop them. Naturally, we did not expect the majority of developers on our team and others who access the REST API to understand which specific SPARQL query to use to access this complex information. Rather, it became much more efficient to abstract the SPARQL queries into an API that operates at the resource level. Goo (which stands for \" Graph Oriented Objects \") is the library that we developed for this purpose. In many ways, Goo contains characteristics of traditional Object-Relational Mapping libraries (ORMs). ORMs are widely used to handle persistency in relational databases and to provide 2 Lecture Notes in Computer Science an abstraction over the physical structure of the data and the raw, underlying SQL queries. They also help to map data between relational models and object-oriented programming languages. Popular ORMs include Hibernate, Ac-tiveRecord and SQLAlchemy for Java, Ruby and Python respectively. Goo is therefore an ORM specifically designed to work â€¦","cites":"0","conferencePercentile":"25"}]}