{"Web_Services_Foundations.csv":[{"venue":"Web Services Foundations","id":"c6f1409113bd09c918172dbd9fe6b62c0bebc49f","venue_1":"Web Services Foundations","year":"2014","title":"Automated Service Composition Based on Behaviors: The Roman Model","authors":"Giuseppe De Giacomo, Massimo Mecella, Fabio Patrizi","author_ids":"1719219, 1732710, 1698994","abstract":"During the last years, many approaches have been proposed in order to address the issue of automated service composition. In this chapter, we discuss the so-called \" Roman model \" , in which services are abstracted as transition systems and the objective is to obtain a composite service that preserves a desired interaction, expressed as a (virtual) target service. We will also outline its deployment in the challenging applications of smart houses, i.e., buildings pervasively equipped with sensors and actuators making their functionalities available according to the service-oriented paradigm. Services are software artifacts, possibly distributed and built on top of different technologies, that export a description of themselves, are accessible to external clients and communicate through a commonly known, standard interface which enables interoperability. More in general, Service Oriented Computing (SOC) is a computing paradigm whose basic elements are services, that can be used as building blocks to devise other services. A classical example of such a paradigm is provided by Web services, i.e., applications published over the Internet and self-described, usually built by different companies and relying on different technologies, which share a same communication protocol, namely SOAP. For instance, many online travel","cites":"3","conferencePercentile":"71.42857143"},{"venue":"Web Services Foundations","id":"d6ac440751f8664b3653fff41d93341051795af4","venue_1":"Web Services Foundations","year":"2014","title":"Conceptual Design of Sound, Custom Composition Languages","authors":"Stefano Soi, Florian Daniel, Fabio Casati","author_ids":"1771200, 1797572, 8720485","abstract":"Service composition, web mashups, and business process modeling are based on the composition and reuse of existing functionalities, user interfaces, or tasks. Composition tools typically come with their own, purposely built composition languages, based on composition techniques like data flow or control flow, and only with minor distinguishing features-besides the different syntax. Yet, all these composition languages are developed from scratch, without reference specifications (e.g., XML schemas), and by reasoning in terms of low-level language constructs. That is, there is neither reuse nor design support in the development of custom composition languages. We propose a conceptual design technique for the construction of custom composition languages that is based on a generic composition reference model and that fosters reuse. The approach is based on the abstraction of common composition techniques into high-level language features, a set of reference specifications for each feature, and the assembling of features into custom languages by guaranteeing their soundness. We specifically focus on mashup languages.","cites":"1","conferencePercentile":"42.85714286"},{"venue":"Web Services Foundations","id":"d639089b953064463261ea202bc80326145e3c40","venue_1":"Web Services Foundations","year":"2014","title":"Assisted Mashup Development: On the Discovery and Recommendation of Mashup Composition Knowledge","authors":"Carlos Rodr√≠guez, Soudip Roy Chowdhury, Florian Daniel, Hamid R. Motahari Nezhad, Fabio Casati","author_ids":"1753672, 1807371, 1797572, 7191589, 8720485","abstract":"Over the past few years, mashup development has been made more accessible with tools such as Yahoo! Pipes that help in making the development task simpler through simplifying technologies. However, mashup development is still a difficult task that requires knowledge about the functionality of web APIs, parameter settings, data mappings, among other development efforts. In this work, we aim at assisting users in the mashup process by recommending development knowledge that comes in the form of reusable composition knowledge. This composition knowledge is harvested from a repository of existing mashup models by mining a set of composition patterns, which are then used for interactively providing composition recommendations while developing the mashup. When the user accepts a recommendation, it is automatically woven into the partial mashup model by applying modeling actions as if they were performed by the user. In order to demonstrate our approach we have implemented Baya, a Firefox plugin for Yahoo! Pipes that shows that it is indeed possible to harvest useful composition patterns from existing mashups, and that we are able to provide complex recommendations that can be automatically woven inside Yahoo! Pipes' web-based mashup editor.","cites":"4","conferencePercentile":"85.71428571"}]}