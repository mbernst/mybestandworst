{"Workshop_on_IO_Virtualization.c":[{"venue":"Workshop on I/O Virtualization","id":"fd15b17baf7bff0eb4560a088b683e06b03a62ff","venue_1":"Workshop on I/O Virtualization","year":"2008","title":"Standardized But Flexible I/O for Self-Virtualizing Devices","authors":"Joshua LeVasseur, Ramu Panayappan, Espen Skoglund, Christo du Toit, Leon Lynch, Alex Ward, Subramanya Dulloor, Rolf Neugebauer, Derek McAuley","author_ids":"3306517, 2807225, 3119437, 2877900, 1932671, 8159426, 1807020, 2091411, 3076406","abstract":"Moving device virtualization from the virtual machine monitor (VMM) to the devices improves virtual-machine performance significantly, but it requires support from the devices. PCI and PCI Express (PCIe) devices can provide VMs with direct and secure I/O through the use of multiple functions per card, but at significant cost and inflexibility. One solution to help reduce the costs is the PCIe SR-IOV standard, which introduces lightweight, virtual PCIe functions. We are currently developing a highly configurable and programmable PCIe networking device which can change its behavior at runtime and which can provide a number of different types of device functions to the host system (e.g., standard NIC, specialized packet capturing devices, or crypto offload engines). We have found the PCIe SR-IOV standard to be too inflexible to support these types of devices, primarily due to its mechanism for configuring virtual functions. In this paper we propose an alternative approach which does not require additional silicon and provides significantly higher flexibility than SR-IOV. We achieve this by delegating enumeration and configuration of \" software configurable virtual functions \" to the main device driver for the device. Our solution is compatible with the higher layers of the PCI device stack of modern operating systems and hypervisors so that we can leverage all the existing mechanisms for hot-plugging, discovering devices, loading device drivers, and assigning PCI devices to virtual machines (including providing DMA isolation with IO-MMUs). We present details of a prototype implementation for Linux and Xen.","cites":"5","conferencePercentile":"50"},{"venue":"Workshop on I/O Virtualization","id":"06a8e7e99d19d513875c77520943f4d916bac313","venue_1":"Workshop on I/O Virtualization","year":"2008","title":"Towards Virtual Passthrough I/O on Commodity Devices","authors":"Lei Xia, Jack Lange, Peter A. Dinda","author_ids":"1796294, 2165675, 1782580","abstract":"A commodity I/O device has no support for virtualiza-tion. A VMM can assign such a device to a single guest with direct, fast, but insecure access by the guest's native device driver. Alternatively, the VMM can build virtual devices on top of the physical device, allowing it to be multiplexed across VMs, but with lower performance. We propose a technique that provides an intermediate option. In virtual passthrough I/O (VPIO), the guest interacts directly with the physical device most of the time, achieving high performance, as in passthrough I/O. Additionally, the guest/device interactions drive a model that in turn identifies (1) when the physical device can be handed off to another VM, and (2) if the guest programs the device to behave illegitimately. In this paper , we describe the VPIO model, and present preliminary results in using it to support a commodity network card within the Palacios VMM we are building. We believe that an appropriate model for an I/O device could be produced by the hardware vendor as part of the design, implementation, and testing process.","cites":"9","conferencePercentile":"62.5"}]}