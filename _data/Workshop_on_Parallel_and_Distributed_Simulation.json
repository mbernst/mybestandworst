{"Workshop_on_Parallel_and_Distri":[{"venue":"Workshop on Parallel and Distributed Simulation","id":"170216994aa5edf89e9e59a67ea1184d9343de9e","venue_1":"Workshop on Parallel and Distributed Simulation","year":"2001","title":"A parallel object-oriented manufacturing simulation language","authors":"Ye Zhang, Wentong Cai, Stephen John Turner","author_ids":"1783768, 1750691, 1730222","abstract":"<i>When used to simulate manufacturing systems, most existing parallel simulation languages cannot easily implement some features of those systems, such as the scheduling rules of a machine or the sharing of operators by multiple machines. This paper presents the design and implementation of a Parallel Object-oriented Manufacturing Simulation Language, called POMSim. A POMSim simulation is developed by using the concept of classes (entity-types) and inheritance to support iterative design of efficient simulation models. POMSim completely hides all the details of parallel simulation, and provides simple and direct constructs to efficiently model the scheduling rules in manufacturing simulation. It also provides asynchronous method invocation and synchronous function call. Pomsim libraries predefine a set of basic classes for manufacturing simulation, each of which represents a particular component in the physical manufacturing system.</i>","cites":"1","conferencePercentile":"13.63636364"},{"venue":"Workshop on Parallel and Distributed Simulation","id":"02785aba1b3e5dbf8df6cfd0a184e65561982995","venue_1":"Workshop on Parallel and Distributed Simulation","year":"1998","title":"GloMoSim: A Library for Parallel Simulation of Large-Scale Wireless Networks","authors":"Xiang Zeng, Rajive L. Bagrodia, Mario Gerla","author_ids":"3164264, 1722527, 8467438","abstract":"A number of library-based parallel and sequential network simulators have been designed. This paper describes a library, called GloMoSim (for Global Mobile system Simulator), for parallel simulation of wireless networks. GloMoSim has been designed to be extensible and composable: the communication protocol stack for wireless networks is divided into a set of layers, each with its own API. Models of protocols at one layer interact with those at a lower (or higher) layer only via these APIs. The modular implementation enables consistent comparison of multiple protocols at a given layer. The parallel implementation of GloMoSim can be executed using a variety of conservative synchronization protocols, which include the null message and conditional event algorithms. This paper describes the GloMoSim library, addresses a number of issues relevant to its parallelization, and presents a set of experimental results on the IBM 9076 SP, a distributed memory multi-computer. These experiments use models constructed from the library modules.","cites":"743","conferencePercentile":"100"},{"venue":"Workshop on Parallel and Distributed Simulation","id":"987456cd5ff6d1b32a74f8ab974f039088052d1a","venue_1":"Workshop on Parallel and Distributed Simulation","year":"1998","title":"A Methodology for Automating the Parallelization of Manufacturing Simulations","authors":"Stephen John Turner, Wentong Cai, Chu-Cheow Lim, Malcolm Yoke-Hean Low, Wen-Jing Hsu, Shell-Ying Huang","author_ids":"1730222, 1750691, 1772249, 1735888, 1743256, 1746606","abstract":"One of the main reasons why parallel discrete event sim-ulution hus not been adopted more widely in industry is that the terminology used by the parallel simulution community differsfrom thatof industriulsimulationpractitioners. This paper shows how the gap between these two communities can be bridged by presenting a methodology for automating the parallelization of manufacturing simulations. Our approach provides a way of automatically generating a mapping from a sequential simulation model to un eflcient parallel implementation. The results of this mapping can be expressed in a form which is independent of any particular parallel simulation system or language. Since it is easy to generate code for different simulation systems, it is possible to evuluate alternative parallel simulation protocols at an early stage of development. A prediction of the petformance can thus be obtained by studying the behaviour of an abstraction of the simulation model with various strategies or on different computing platforms.","cites":"0","conferencePercentile":"4.761904762"},{"venue":"Workshop on Parallel and Distributed Simulation","id":"14f33810bbda2f386ef4aa986651fb3bd7b15b77","venue_1":"Workshop on Parallel and Distributed Simulation","year":"1999","title":"Performance Prediction Tools for Parallel Discrete-Event Simulation","authors":"Chu-Cheow Lim, Malcolm Yoke-Hean Low, Boon-Ping Gan, Sanjay Jain, Wentong Cai, Wen-Jing Hsu, Shell-Ying Huang","author_ids":"1772249, 1735888, 1794378, 4367848, 1750691, 1743256, 1746606","abstract":"We have developed a set of performance prediction tools which help to estimate the achievable speedups from parallelizing a sequential simulation. The tools focus on two important factors in the actual speedup of a parallel simulation program : (a) the simulation protocol used, and (b) the inherent parallelism in the simulation model. The first two tools are a performance/parallelism analyzer for a conservative, asynchronous simulation protocol, and a similar analyzer for a conservative, synchronous (\"super-step\") protocol. Each analyzer allows us to study how the speedup of a model changes with increasing number of processors, when a specific protocol is used. The third tool -- a critical path analyzer -- gives an ideal upper bound to the model's speedup. This paper gives an overview of the prediction tools, and reports the predictions from applying the tools to a discrete-event wafer fabrication simulation model. The predictions are close to speedups from actual parallel implementations. These tools help us to set realistic expectations of the speedup from a parallel simulation program, and to focus our work on issues which are more likely to yield performance improvement.","cites":"16","conferencePercentile":"65"},{"venue":"Workshop on Parallel and Distributed Simulation","id":"f6315c3436b43dc87ecb1f7869fb1e16ecbe8fdd","venue_1":"Workshop on Parallel and Distributed Simulation","year":"1996","title":"Parallel Simulation of a High-Speed Wormhole Routing Network","authors":"Rajive L. Bagrodia, Yuan Chen, Mario Gerla, Bruce Kwan, Jay Martin, Prasasth Palnati, Simon Walton","author_ids":"1722527, 7137017, 8467438, 2774839, 2727340, 1992223, 2298676","abstract":"A flexible simulator has been developed to simulate a two-level metropolitan area network which uses wormhole routing. To accurately model the nature of wormhole routing, the simulator performs discrete-byte rather than discrete-packet simulation. Despite the increased computational workload that this implies, it has been possible to create a stmulator with acceptable performance by writing it in Maisie, a parallel dzscrete-event simuiatton language. The simuiator provides an accurate model of an actual high-speed, source-routing, worrnho!e network (the Myrinet) and is the jirst such simulator. The paper describes the simulator and reports on the performance of parallel implementations of the simulator on a 24-node IBM SP 2 mu!ttcomputer. The parallel implementations yzelded reasonable speedups. For instance, on 1$ nodes, the conservative a[gortthm yielded a speed-up of about 6 whereas an optimistic algorithm ytelded a speed-up of about 4. 1 Introduction The Supercomlputer SuperNet (SSN) [10] is a hierarchical network prototype for supercomputer in-terconnection across campus and metropolitan areas. This project is ongoing at UCLA, the Jet Propulsion Laboratory, and The Aerospace Corporation. The goal of the project is to obtain a low-latency high-bandwidth interccmnection network for supercomput-ers located in a metropolitan area (about 30 km apart). The hierarchical network architecture of SSN is illustrated in Fig, 1, At the lower level, we have a high-speed electronic mesh Local Area Network (electronic LAN) to which are connected the hosts of the network — workstations, supercomputers etc. At the higher level, we have an optical backbone network that interconnects several of these electronic LANs. The opt ical backbone network employs Wavelength Division Multiplexing (WDM) to exploit the vast band-width offered by the optical fiber medium. The high-speed electronic network in SSN is a commercial product (Myrinet) that uses wormhole routing [13] to achieve very low latency. The optical backbone network also supports wormhole routing. Other important features of the electronic LAN include source routing (the worm has the complete route to the destination when it leaves the source) and back-pressure flow control. These features are being extended to the optical backbone as well. SSN is required to provide support for circuit-switched traffic, packet-switched traffic and multicas-ting (multipoint traffic). Of these, only support for packet-switched traffic is available in the electronic LAN testbed. A simulation testbed was developed for circuit-switched and multicast traffic using the Maisie simulation language. This paper describes the simu-lator and presents results of an experimental study on parallel execution of the …","cites":"8","conferencePercentile":"34.09090909"},{"venue":"Workshop on Parallel and Distributed Simulation","id":"a072210416ba77db0a6daeb859e4da3a77bb6ab7","venue_1":"Workshop on Parallel and Distributed Simulation","year":"1999","title":"Shock Resistant Time Warp","authors":"Alois Ferscha, James Johnson","author_ids":"1745790, 3002659","abstract":"In an attempt to cope with time-varying workload, traditional adaptive Time Warp protocols are designed to react in response to performance changes by altering control parameter configurations, like the amount of available memory, the size of the checkpointing interval, the frequency of GVT computation, fossil collection invocations, etc.\\ We call those schemes ``reactive'' because all control decisions are undertaken based on historical performance information collected at runtime, and come into effect in future system states. What must be considered a drawback of this class of approaches is that Time Warp logical processes (LPs) have most likely reached a state different from the one for which the control action was established - thus inducing performance control activities which are always outdated.This paper develops environment aware, self adaptive Time Warp LPs implementing a pro-active performance control scheme, addressing the timeliness of control decisions. Opposed to reactive TW schemes, our pro-active control mechanism based on a statistical analysis of the state history periodically collected in (real) time intervals of size d, forecasts a future LP state. A performance control decision is established, that is most appropriate for the expected future LP state, i.e. the state when the corresponding control activity would become effective. Depending on the forecast quality, a pro-active scheme will presumably exhibit performance superior to re-active schemes, at least for cases where state changes in the time frame $\\Delta$ are very likely. In this paper we study the ability of pro-active TW LPs, to adapt to sudden load changes, especially to abruptly occurring background workloads injected by other applications executing concurrently with the TW simulation on a network of workstations. Experimental results show that the protocol is able to capture abrupt changes in both computational and communication resource availability, justifying the title: \"shock resistant Time Warp\".","cites":"4","conferencePercentile":"25"}]}