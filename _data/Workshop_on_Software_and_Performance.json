{"Workshop_on_Software_and_Perfor":[{"venue":"Workshop on Software and Performance","id":"407aa46f30c2da4dcd85e3ad07ca24efbb980966","venue_1":"Workshop on Software and Performance","year":"2002","title":"Integrating non-blocking synchronisation in parallel applications: performance advantages and methodologies","authors":"Philippas Tsigas, Yi Zhang","author_ids":"1701362, 3249934","abstract":"In this paper we investigate how performance and speedup of applications would be affected by using non-blocking rather than blocking synchronisation in parallel systems. The results obtained show that for many applications, non-blocking synchronisation lead to significant speedups for a fairly large number of processors, while it never slows the applications down. As part of this investigation this paper also provides a set of efficient and simple translations that show how typical blocking operations found in parallel applications, such as simple locks, queues and lock trees can be translated into non-blocking equivalents that use hardware primitives common in modern multiprocessor systems. With these translations this paper clearly demonstrates that it is easy for the application designer/programmer to replace the blocking operations commonly found on with non-blocking equivalents ones. For the empirical results a set of representative applications running on a large-scale ccNUMA machine were used.","cites":"25","conferencePercentile":"83.78378378"},{"venue":"Workshop on Software and Performance","id":"4e33a46f6599a637c731436b17458af46e5ce5f8","venue_1":"Workshop on Software and Performance","year":"2002","title":"The Sisyphus databus retrieval software performance antipattern","authors":"Robert F. Dugan, Ephraim P. Glinert, Ali Shokoufandeh","author_ids":"2956167, 3072281, 1740078","abstract":"In this paper we propose the Sisyphus database retrieval software performance antipattern. The antipattern occurs in application designs that process large, frequently accessed lists stored in a relational database, but display only a small subset to the user. Software Performance Engineering (SPE) techniques are used to analyze the antipattern. Four solutions are evaluated: rownum and index, upper/lower bound, sequence numbering, and caching. We discuss the real world challenges of correcting this antipattern early in the application life cycle.","cites":"2","conferencePercentile":"22.97297297"}]}