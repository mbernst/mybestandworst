{"X10PLDI.csv":[{"venue":"X10@PLDI","id":"39088518314f391457e644e2e4d8b929b8cadce1","venue_1":"X10@PLDI","year":"2015","title":"Optimization of x10 programs with ROSE compiler infrastructure","authors":"Michihiro Horie, Mikio Takeuchi, Kiyokuni Kawachiya, David Grove","author_ids":"2023057, 2804738, 1697424, 2383426","abstract":"X10 is a Java-like programming language that introduces new constructs to significantly simplify scale-out programming based on the Asynchronous Partitioned Global Address Space (APGAS) programming model. The fundamental goal of X10 is to enable scalable, high-performance, high-productivity programming of large scale computer systems for both conventional numerically intensive HPC workloads and for emerging &#8220;Big Data&#8221; workloads. X10 is implemented via source-to-source compilation; the X10 compiler takes as input X10 programs, applies high-level transformations primarily targeting X10&#8217;s APGAS constructs, and outputs either C++ or Java source code that is further compiled to yield an executable program. ROSE is a multi-lingual compiler infrastructure for optimizing HPC applications using source-to-source transformations. It supports widely used programming models for parallel and distributed computing and provides a rich set of optimizations for serial programming models. In this paper, we report our early experiences connecting the X10 and ROSE and compilers to enable X10 programs to benefit from ROSE&#8217;s suite of optimizations. To demonstrate the applicability of our approach, we compiled the LULESH proxy application with the combined toolchain and obtained a 10% performance improvement.","cites":"0","conferencePercentile":"28.57142857"}]}