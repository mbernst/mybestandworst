{"XP.csv":[{"venue":"XP","id":"d32a7430f2499b4cd9bd77fe1f60699158cf7c77","venue_1":"XP","year":"2003","title":"Where Do Unit Tests Come from?","authors":"Jing Yuan, Mike Holcombe, Marian Gheorghe","author_ids":"1698556, 8346823, 1700349","abstract":"In Extreme programming unit testing is organized so that the unit tests are written before coding commences. For many programmers the selection of the test cases is something of an 'ad hoc' process. Where programmers are experienced in writing test sets it is common for them to use white box or structural test techniques. However, these rely on the structure of the code being available which is not the case with XP. This article describes a principled way of creating powerful, functional unit tests from informal descriptions of the units.","cites":"8","conferencePercentile":"60.86956522"},{"venue":"XP","id":"3d344e49f8021793d53b8c909a5b9ed853ef038d","venue_1":"XP","year":"2008","title":"The TDD-Guide Training and Guidance Tool for Test-Driven Development","authors":"Oren Mishali, Yael Dubinsky, Shmuel Katz","author_ids":"3038199, 1772317, 1729121","abstract":"A tool is presented for guiding Test-Driven Development (TDD), called TDD-Guide. The tool is integrated into an existing development environment and guides the developer during the development by providing notifications that encourage use of TDD. The TDD practice is defined through rules that can easily be changed and are used to generate code incorporated to a development environment using an aspect-based framework, so that the development of the tool has agile characteristics. Feedback from user experiments both validates the rules and suggests refinements to improve TDD-Guide, as is shown in descriptions of two user experiments.","cites":"10","conferencePercentile":"83.33333333"},{"venue":"XP","id":"a653baa177aaabafa27a43091c169349193a14df","venue_1":"XP","year":"2009","title":"FitClipse: A Tool for Executable Acceptance Test Driven Development","authors":"Shahedul Huq Khandkar, Shelly Park, Yaser Ghanam, Frank Maurer","author_ids":"3322099, 1807877, 1798683, 1736996","abstract":"FitClipse is an Eclipse plug-in for facilitating Executable Acceptance Test Driven Development. The tool allows the users to edit acceptance tests, automatically generate fixtures, execute tests and represent the test results graphically including an option to view the test results history. The tool helps with regression testing because it can distinguish between requirements tasks that were never tackled before and tasks that were already completed but are now failing again. FitClipse currently supports GreenPepper and Fit framework.","cites":"0","conferencePercentile":"16.66666667"},{"venue":"XP","id":"e3c612591209ed00917af60ae952d75759315315","venue_1":"XP","year":"2010","title":"A Literature Review on Story Test Driven Development","authors":"Shelly Park, Frank Maurer","author_ids":"1807877, 1736996","abstract":"This paper presents a literature review on story-test driven development. Our findings suggest that there are many lessons learned papers that provide anecdotal evidence about the benefits and issues related to the story test driven development. We categorized these findings into seven themes: cost, time, people, code design, testing tools, what to test and test automation. We analyzed research papers on story test driven development to find out how many of these anecdotal findings were critically examined by researchers and analyzed the gaps in between. The analysis can be used by researchers as a ground for further empirical investigation.","cites":"1","conferencePercentile":"46.875"},{"venue":"XP","id":"62f6418d85dee324633343f4f764d8a6c0765fba","venue_1":"XP","year":"2010","title":"Auto-tagging Emails with User Stories Using Project Context","authors":"S. M. Sohan, Michael M. Richter, Frank Maurer","author_ids":"1786599, 2243229, 1736996","abstract":"In distributed agile teams, people often use email as a knowledge sharing tool to clarify the project requirements (aka user stories). Knowledge about the project included in these emails is easily lost when recipients leave the project or delete emails for various reasons. However , the knowledge contained in the emails may be needed for useful purposes, such as, re-engineering a software, changing vendor and so on. But, it is difficult to relate texts such as emails to certain topics because the relation is not explicit. In this paper, we present and evaluate a technique for automatically relating emails with user stories based on their text and context similarity. Agile project management tools can use this technique to automatically build a knowledge base that is otherwise costly to produce and maintain.","cites":"0","conferencePercentile":"18.75"},{"venue":"XP","id":"3acd61f54d1487fc585c9aa1fffe474a5dd363be","venue_1":"XP","year":"2009","title":"XP Workshop on Agile Product Line Engineering","authors":"Yaser Ghanam, Kendra Cooper, Pekka Abrahamsson, Frank Maurer","author_ids":"1798683, 1767464, 1776126, 1736996","abstract":"Software Product Line Engineering (SPLE) promises to lower the costs of developing individual applications as they heavily reuse existing arti-facts. Besides decreasing costs, software reuse achieves faster development and higher quality. Traditionally, SPLE favors big design upfront and employs traditional , heavy weight processes. On the other hand, agile methods have been proposed to rapidly develop high quality software by focusing on producing working code while reducing upfront analysis and design. Combining both paradigms, although is challenging, can yield significant improvements.","cites":"1","conferencePercentile":"33.33333333"},{"venue":"XP","id":"380c6a61eee295c83cbf7c5805ca9ce7ab8ba9b8","venue_1":"XP","year":"2010","title":"Extreme Product Line Engineering - Refactoring for Variability: A Test-Driven Approach","authors":"Yaser Ghanam, Frank Maurer","author_ids":"1798683, 1736996","abstract":"Software product lines-families of similar but not identical software products-need to address the issue of feature variability. That is, a single feature might require various implementations for different customers. Also, features might need optional extensions that are needed by some but not all products. Software product line engineering manages variability by conducting a thorough domain analysis upfront during the planning phases. However, upfront, heavyweight planning approaches are not well-aligned with the values of minimalistic practices like XP where bottom-up, incremental development is common. In this paper, we introduce a bottom-up, test-driven approach to introduce variability to systems by reactively refactoring existing code. We support our approach with an eclipse plug-in to automate the refactoring process. We evaluate our approach by a case study to determine the feasibility and practicality of the approach.","cites":"6","conferencePercentile":"90.625"},{"venue":"XP","id":"d624f65adaa1428e63f8710506789d2abf6f6e62","venue_1":"XP","year":"2011","title":"Empirical Evaluation of Agile Practices Impact on Team Productivity","authors":"Claudia de O. Melo, Fabio Kon","author_ids":"3232471, 1720007","abstract":"1 Motivation Agile methods have become more popular since the early 2000s and, in some cases, can offer better results for software development projects when compared to traditional approaches. Agile methods promise to achieve high productivity and to deliver high-quality software, attracting the attention of companies, which demand ever-higher development speed and quality in their products. The general topic of this PhD thesis is to perform an empirical evaluation of the impact of agile practices on team productivity by means of empirical studies. Regarding the current state of theory and research, more empirical evidence of effectiveness on practices recommended by agile methods are required [1]. Particularly, there are few scientific studies about the impact of agile practices on productivity. In the systematic review conducted by Dybå and Dingsoyr [1], studies just analyse the impact of agile methods on team productivity in terms of lines of code (LOC). However, software development is knowledge work which nature is more complex and harder to evaluate [2]. Measuring productivity with a richer set of metrics would help to deal with this drawback, allowing deeper analysis of the results obtained in the studies. Moreover, agile teams not always collect enough data for a consistent measurement. Therefore, we have to identify the most viable way that best fits the agile spirit in order to measure productivity. Some recent studies discuss the main software development productivity factors [3]. All include the development method as a factor, but in a very superficial way. None of them discusses how agile methods can influence team productivity. In addition, according to Petersen [4], many studies have been conducted before the year 2000. Thus, productivity factors \" need to be re-evaluated in currently operating development organizations \". 2 Agile practices impact on team productivity The goals of my PhD research are expressed by the Research Question 1 (RQ1) and better investigated through the following sub-questions (SQ): – RQ1. How do agile practices affect productivity of agile teams? – SQ1. What are the agile practices that most affect the productivity of teams? PhD student † Advisor","cites":"0","conferencePercentile":"27.77777778"},{"venue":"XP","id":"3bb6ebb8a16061fa2bbec37622572a1d12b9cc66","venue_1":"XP","year":"2004","title":"The Oregon Software Development Process","authors":"Till Schümmer, Robert Slagter","author_ids":"1738533, 2315620","abstract":"User participation is still a difficult topic in software development. Based on the results of the Oregon experiment in construction we propose a novel development process – the Oregon Software Development Process. The process focusses on patterns to empower end-users so that they can make well-informed design decisions and tailor their environments. The four core principles of the process – participation, piecemeal growth, patterns, and diagnosis – are discussed and first anecdotal usage experiences are provided.","cites":"7","conferencePercentile":"66.66666667"},{"venue":"XP","id":"e6ff449dea30cf68e09053eb5a009ff2e3b37dc6","venue_1":"XP","year":"2009","title":"Communicating Domain Knowledge in Executable Acceptance Test Driven Development","authors":"Shelly Park, Frank Maurer","author_ids":"1807877, 1736996","abstract":"We present results of a case study looking at how domain knowledge is communicated to developers using executable acceptance test driven development at a large software development company. We collected and analyzed qualitative data on a large software development team's testing practices and their use of a custom-built executable acceptance testing tool. Our findings suggest that executable acceptance tests (1) helps communicate domain knowledge required to write software and (2) can help software developers to communicate the status of the software implementation better. In addition to presenting these findings, we discuss several human aspects involved in facilitating executable acceptance test driven development.","cites":"4","conferencePercentile":"87.5"},{"venue":"XP","id":"4aa82b19d51da858768d779d773048a4f4799d5a","venue_1":"XP","year":"2003","title":"Coaching Coaches","authors":"Görel Hedin, Lars Bendix, Boris Magnusson","author_ids":"1693048, 1752519, 1703643","abstract":"We have developed a tandem of undergraduate courses for teaching XP and coaching of XP teams. This paper focuses on the coaching course and the coaching practices we have developed. The tandem of courses enables us to give a challenging and interesting course for the coaches, and, at the same time, allows us to afford on-site coaches for the younger students, providing them with a high quality environment for learning XP. We also describe our experiences from the first instance of the courses and how we have tackled the boot-strapping problem.","cites":"3","conferencePercentile":"32.60869565"},{"venue":"XP","id":"f9c12149b5ec1ffca56f787fe285a2c637fe1700","venue_1":"XP","year":"2010","title":"Improving Responsiveness, Bug Detection, and Delays in a Bureaucratic Setting: A Longitudinal Empirical IID Adoption Case Study","authors":"Caryna Pinheiro, Frank Maurer, Jonathan Sillito","author_ids":"2052777, 1736996, 2072868","abstract":"This paper empirically studies a group of projects in a large bureaucratic government agency that adopted iterative and incremental development (IID). We found that a project that followed IID since inception provided substantially better bug-fixing responsiveness and found bugs earlier in the development lifecycle than existing projects that migrated to IID. IID practices also supported managerial decisions that lead to on-time & on-budget delivery.","cites":"0","conferencePercentile":"18.75"},{"venue":"XP","id":"c7e6b608f5b5ef91b52493eb63fb121ed8a44a80","venue_1":"XP","year":"2011","title":"Test-Driven Development of Graphical User Interfaces: A Pilot Evaluation","authors":"Theodore D. Hellmann, Ali Hosseini-Khayat, Frank Maurer","author_ids":"2870758, 1838017, 1736996","abstract":"This paper presents a technique for test-driven development of GUI-based applications, as well as a pilot evaluation. In our approach, user interface prototypes are created in such a way as to allow capture/replay tools to record interactions with them. These recordings can then be replayed on the actual GUI as it is being developed in a test-driven fashion. The pilot evaluation found that developers integrated GUI tests, based on user interface prototypes, into their development process and used them as a way to determine when a feature is actually complete. Study participants felt that TDD of GUI based applications is useful.","cites":"0","conferencePercentile":"27.77777778"},{"venue":"XP","id":"1571c7ec82f4b32480aae2b3c40c4e4ff5f8d75d","venue_1":"XP","year":"2011","title":"A Test-Driven Approach for Extracting Libraries of Reusable Components from Existing Applications","authors":"Elaf Selim, Yaser Ghanam, Chris Burns, Teddy Seyed, Frank Maurer","author_ids":"1683025, 1798683, 2050548, 3078189, 1736996","abstract":"In agile approaches such as Extreme Programming, time is not spent on making sure that system components can be reused in similar systems. Therefore, there is a need to investigate whether reuse can be achieved by extracting reusable assets from existing applications. This paper presents an approach that relies on refactoring and testing practices for extracting reusable assets from existing applications. The approach creates reusable APIs in a bottom-up fashion, on demand when a new application might benefit from component in an existing application. The extraction process is guided and supported by the usage examples and the testing scenarios in the existing application and the new one. The paper presents a case study, where the approach was used to extract components from the user interface of an existing application, wrap these components in an API, and use this API in the existing and new applications.","cites":"0","conferencePercentile":"27.77777778"},{"venue":"XP","id":"87926f6f54a2b0d3e2f6afea9ae04ee18b835235","venue_1":"XP","year":"2005","title":"Introducing Extreme Programming into a Software Project at the Israeli Air Force","authors":"Yael Dubinsky, Orit Hazzan, Arie Keren","author_ids":"1772317, 1738207, 1787741","abstract":"Introducing Extreme Programming (XP) to an industrial software development team usually involves technical and professional aspects as well as social and organizational ones. The introducing of a new software development method in general and XP in particular into a software project team that operates in the army emphasizes and extends these issues. In this paper we present a process through which XP has been introduced into a 60-members software development project at the Israeli Air Force. Focus is placed on an XP workshop conducted with ten officers who worked at different teams of the project. Specifically, we present the principles according to which we facilitated the workshop, the workshop agenda and data regarding the way the participants perceive some of the XP practices. Recently, the first XP team in this project has started to work the XP way.","cites":"4","conferencePercentile":"57.5"},{"venue":"XP","id":"7c7ae13c4a1b8208ac64144352881527d812fba3","venue_1":"XP","year":"2005","title":"XP South of the Equator: An eXPerience Implementing XP in Brazil","authors":"Alexandre Freire da Silva, Fabio Kon, Cicero Torteli","author_ids":"1825872, 1720007, 2388690","abstract":"Many have reported successful experiences using XP, but we have not yet seen many experiences adapting agile methodologies in developing countries such as Brazil. In a developing economy, embracing change is extremely necessary. This paper relates our experience successfully introducing XP in a start-up company in Brazil. We will cover our adaptations of XP practices and how cultural and economical aspects of the Brazilian society affected our adoption of the methodology. We will discuss how we managed to effectively coach a team that had little or no previous skill of the technologies and practices adopted. We will also cover some new practices that we introduced mid-project and some practices we believe emerged mostly because of Brazilian culture. The lessons we learned may be applicable in other developing countries.","cites":"11","conferencePercentile":"90"},{"venue":"XP","id":"3e5e520a19d866793b1977da76fe40b374410de3","venue_1":"XP","year":"2014","title":"Why We Need a Granularity Concept for User Stories","authors":"Olga Liskin, Raphael Pham, Stephan Kiesling, Kurt Schneider","author_ids":"1765703, 7161686, 2789527, 1724127","abstract":"User stories are a widespread instrument for representing requirements. They describe small user-oriented parts of the system and guide the daily work of developers. Often however, user stories are too coarse, so that misunderstandings or dependencies remain unforeseeable. Granularity of user stories needs to be investigated more, but at the same time is a hard-to-grasp concept. This paper investigates Expected Implementation Duration (EID) of a user story as a characteristic of granularity. We want to find out, whether it is suitable as a quality aspect and can help software teams improve their user stories. We have conducted a study with software engineering practitioners. There, many user stories had a relatively high EID of four or more days. Many developers state to have experienced certain problems to occur more often with such coarse user stories. Our findings emphasize the importance to reflect on granularity when working with user stories.","cites":"5","conferencePercentile":"66.66666667"},{"venue":"XP","id":"ac6529b15eed25ebb434ee2416a551cfc38db9b6","venue_1":"XP","year":"2009","title":"Using Digital Tabletops to Support Distributed Agile Planning Meetings","authors":"Xin Wang, Yaser Ghanam, Shelly Park, Frank Maurer","author_ids":"1736408, 1798683, 1807877, 1736996","abstract":"Digital tabletop is an emerging technology that is being increasingly used to support group activities. Agile Planner for Digital Tabletops (APDT) is a tool that was built to support agile planning meetings. It provides interactions similar to those used in traditional pen-and-paper meetings. Previous versions of APDT were only capable of handling collocated planning meetings. In this paper, we succinctly describe the new extension of APDT that provides support for distributed planning meetings. A series of evaluations for the new version of APDT has been conducted, and the feedback tends to be positive.","cites":"3","conferencePercentile":"75"},{"venue":"XP","id":"d36861a84b37a02a5148140eaeac3324eba5c8a2","venue_1":"XP","year":"2007","title":"Tracking the Evolution of Object-Oriented Quality Metrics on Agile Projects","authors":"Danilo T. Sato, Alfredo Goldman, Fabio Kon","author_ids":"2387774, 1686666, 1720007","abstract":"The automated collection of source code metrics can help agile teams to understand the software they are producing, allowing them to adapt their daily practices towards an environment of continuous improvement. This paper describes the evolution of some object-oriented metrics in several agile projects we conducted recently in both academic and governmental environments. We analyze seven different projects, some where agile methods were used since the beginning and others where some agile practices were introduced later. We analyze and compare the evolution of such metrics in these projects and evaluate how the different project context factors have impacted the source code.","cites":"6","conferencePercentile":"61.76470588"},{"venue":"XP","id":"998cde2881e954515a12ff515a80369657a4d599","venue_1":"XP","year":"2006","title":"Comparative Analysis of Job Satisfaction in Agile and Non-agile Software Development Teams","authors":"Grigori Melnik, Frank Maurer","author_ids":"1702764, 1736996","abstract":"Software engineering is fundamentally driven by economics. One of the issues that software teams face is employee turnover which has a serious economic impact. The effect of job dissatisfaction on high turnover is consistently supported by evidence from multiple disciplines. The study investigates if and how job satisfaction relates to development processes that are being used and the determinants of job satisfaction across a wide range of teams, regions and employees. A moderate positive correlation between the level of experience with agile methods and the overall job satisfaction was found. The evidence suggests that there are twice as many members of agile teams who are satisfied with their jobs (vs members of non-agile teams). The ability to influence decisions that affect you, the opportunity to work on interesting projects, and the relationships with users were found to be statistically significant satisfiers.","cites":"14","conferencePercentile":"91.66666667"},{"venue":"XP","id":"152ee9665b2d9bbf1649de89ff08cb64f1ba4c84","venue_1":"XP","year":"2009","title":"ActiveStory Enhanced: Low-Fidelity Prototyping and Wizard of Oz Usability Testing Tool","authors":"Ali Hosseini-Khayat, Yaser Ghanam, Shelly Park, Frank Maurer","author_ids":"1838017, 1798683, 1807877, 1736996","abstract":"This paper presents \" ActiveStory Enhanced \" as a tool that enables prototyping user interfaces and conducting usability tests in a way that is aligned with agile principles. The tool allows designers to sketch user interface prototypes as well as add basic interactions to provide navigation. Sketching can be done using a mouse or stylus on tablet PCs. Designers can then export the prototype to a web-based Wizard of Oz testing tool, allowing test participants to remotely walk through a UI while recording metrics such as mouse movements and time spent on pages. ASE improves on the original by providing some usability improvements, improved browser support, undo support, more control over the design and an improved pen and paper metaphor.","cites":"2","conferencePercentile":"54.16666667"},{"venue":"XP","id":"4bb4acf19840568b08b0675d592b1521900cdf48","venue_1":"XP","year":"2004","title":"Roles in Agile Software Development Teams","authors":"Yael Dubinsky, Orit Hazzan","author_ids":"1772317, 1738207","abstract":"One of the key elements in describing a software development method is the roles that are assigned to the members of the software team. This article describes our experience in assigning roles to students who are involved in the development of software projects, working in Extreme Programming teams. This experience, which is based on 25 such projects, teaches us that a personal role for each teammate increases personal responsibility while maintaining the essence of the software development method. In this paper we discuss ways in which different software development methods address the place of roles in a software development team. We also share our experience in refining role specifications and suggest a way to achieve and measure progress by using the perspective of the different roles.","cites":"12","conferencePercentile":"72.22222222"},{"venue":"XP","id":"7de69cad3d622f0c8fcd1967eaa93155fc27e50b","venue_1":"XP","year":"2008","title":"Adopting Iterative Development: The Perceived Business Value","authors":"Caryna Pinheiro, Frank Maurer, Jonathan Sillito","author_ids":"2052777, 1736996, 2072868","abstract":"Iterative development is a common characteristic of agile methods. It is important to understand how the adoption of an iterative process provides business value, and how this value can be used to buy management support to implement other agile techniques. This paper exposes to the community an experience report of a large government agency's migration from a Waterfall process to an iterative methodology, the Rational Unified Process (RUP). Through field observations and semi-formal interviews with key business partners, we found five main areas of improvement: reestablishment of business involvement, better distribution of acceptance testing effort, introduction of a testing team, less pushback on necessary changes, improved communication and management of expectations. This paper contributes to an understanding of the business advantages in adopting an iterative development practice in a bureaucratic industrial setting. Such an understanding is important as many business leaders prefer to adopt processes that have been successfully implemented by others, to reduce the risk of failure [1]. The company under study is a large Oil & Gas government agency that lacked the initial management support to adopt mainstream agile methods. This agency has a workforce of 900+ employees, with a large IT department comprised of over 10 different IT Programs. This study collected field observations and interviews from the key business representatives of the largest IT Program in the corporation, focusing on a set of three existing applications, and two newly developed systems. These multi-million dollar projects support business critical functions, such as the digital submission of information, internal processing of such information, and the publishing of the results to the public. The original IT vision was to develop a simple solution to provide a central data management point to the business partners. The first release commenced in early 2001, with a group of 4-6 developers. The development team did not formally adopt a development methodology, but was following a Waterfall approach: gather all the system requirements, then develop the entire application, which is at last handed off 2 to the business partners for testing and approval. After the first few releases, a new vision for a workflow system, that would allow digital submission of data for quicker turnaround times, was born. By 2004, the team increased to over 15 developers, with a total of 40+ team members (including business analysts, technical support, and managers). The former Waterfall process was not able to support the increasing pace of …","cites":"3","conferencePercentile":"45.83333333"},{"venue":"XP","id":"a59da4f53b3c72291e8d4d5529c84b21d269a27f","venue_1":"XP","year":"2007","title":"Agile Software Development Meets Corporate Deployment Procedures: Stretching the Agile Envelope","authors":"Olly Gotel, David Leip","author_ids":"3167501, 2207710","abstract":"This paper describes a process initiative within IBM to make the Corporate Portal (ibm.com) development practices more responsive to changing customer needs and explains the bottlenecks that arose with application deployment when this agile approach was not initially extended throughout the wider solution delivery lifecycle. The paper details the simple process changes that were adopted to expand the agile philosophy beyond development.","cites":"0","conferencePercentile":"14.70588235"},{"venue":"XP","id":"ea4fa3e85a5fdb1a67e941931677d31bc3ac6101","venue_1":"XP","year":"2007","title":"FitClipse: A Fit-Based Eclipse Plug-In for Executable Acceptance Test Driven Development","authors":"Chengyao Deng, Patrick Wilson, Frank Maurer","author_ids":"2021451, 7642613, 1736996","abstract":"We conducted a survey on Executable Acceptance Test Driven Development (or: Story Test Driven Development). The results show that there is often a substantial delay between defining an acceptance test and its first successful pass. Therefore, it becomes important for teams to easily be able to distinguish between tasks that were never tackled before and tasks that were already completed but whose tests are now failing again. We then describe our FitClipse tool that extends Fit by maintaining a history of acceptance test results. Based on the history, FitClipse is able to generate reports that show when an acceptance test is suddenly failing again.","cites":"10","conferencePercentile":"85.29411765"},{"venue":"XP","id":"5b556eaa1bc09fb3c916b9ff21a83f011b812194","venue_1":"XP","year":"2003","title":"Using Metaphors in eXtreme Programming Projects","authors":"Yael Dubinsky, Orit Hazzan","author_ids":"1772317, 1738207","abstract":"Metaphor is one of the twelve practices of Extreme Programming (XP), and definitely among the more difficult ones to teach and use. We present our experience with the use of metaphors and conclude with suggested guidelines for teachers.","cites":"1","conferencePercentile":"13.04347826"},{"venue":"XP","id":"67219c75d8cb2712372611128d9748ffc39abc6d","venue_1":"XP","year":"2007","title":"Using Horizontal Displays for Distributed and Collocated Agile Planning","authors":"Robert Morgan, Jagoda Walny, Henning Kolenda, Estaban Ginez, Frank Maurer","author_ids":"3789423, 2820094, 2035443, 2224069, 1736996","abstract":"Computer-supported environments for agile project planning are often limited by the capability of the hardware to support collaborative work. We present DAP, a tool developed to aid distributed and collocated teams in agile planning meetings. Designed with a multi-client architecture, it works on standard desktop computers and digital tables. Using digital tables, DAP emulates index card based planning without requiring team members to be in the same room.","cites":"5","conferencePercentile":"52.94117647"},{"venue":"XP","id":"e5fd70f8419d1466b8b02310c6945974b8ae5f6b","venue_1":"XP","year":"2007","title":"Job Satisfaction and Motivation in a Large Agile Team","authors":"Bjørnar Tessem, Frank Maurer","author_ids":"2486227, 1736996","abstract":"Agile software development processes emphasize team work in small groups as one of the features that contribute to high software quality and knowledge dispersion among developers. Research supports claims that agile methods also lead to higher motivation and job satisfaction among developers. Research in workplace psychology indicates that factors like autonomy, variety, significance, feedback, and ability to complete a whole task are significant factors to ensure satisfaction and motivation among workers. In this case study, we show, through the analysis of semi structured interviews with software developers and business representatives, that large teams continuously adapting the SCRUM methodology are able to ensure these empowering factors, and thus ensure a staff of motivated and satisfied software developers. The study presented is based on data from an agile project involving 70 people (including 30 developers) building a software product for the oil & gas industry.","cites":"12","conferencePercentile":"100"},{"venue":"XP","id":"8fb80882ca325204674374fe91a1c835e798dcf2","venue_1":"XP","year":"2004","title":"When XP Met Outsourcing","authors":"Angela Martin, Robert Biddle, James Noble","author_ids":"7304637, 1738737, 1747596","abstract":"Outsourcing is common for software development, and is the context for many projects using agile development processes. This paper presents two case studies concentrating on the customer role in projects using outsourcing and extreme programming (XP). The studies follow an interpretive approach based on in-depth interviews, and suggest some tensions between some contractual arrangements in outsourcing, and the XP process. In particular, one suggests XP worked well in the context of their particular outsourcing arrangements , and the other study suggests difficulty in aligning XP with a different set of outsourcing arrangements.","cites":"14","conferencePercentile":"80.55555556"},{"venue":"XP","id":"457ae24476a2c7191b60d21b21ec68c681203db0","venue_1":"XP","year":"2003","title":"Extreme Makeover: Bending the Rules to Reduce Risk Rewriting Complex Systems","authors":"Sharon Johnson, Jia Mao, Eric Nickell, Ian Smith","author_ids":"7994186, 2735198, 2201933, 1735225","abstract":"We describe our experience using XP to reimplement sophisticated, high-performance imaging software in a research environment. We focus especially on practices we used to derive value from the existing software, notably reimplementation by ransacking and conversion as learning. Our experience suggests that some of the classic 12 practices which define XP should be adjusted when there is a existing, well-structured system to serve as a guide.","cites":"3","conferencePercentile":"32.60869565"},{"venue":"XP","id":"03385cff7c2063201b0311a7913f270474497ae3","venue_1":"XP","year":"2007","title":"Multiple Perspectives on Executable Acceptance Test-Driven Development","authors":"Grigori Melnik, Frank Maurer","author_ids":"1702764, 1736996","abstract":"This descriptive case study is about the dynamics of a software engineering team using executable acceptance test-driven development in a real world project. The experiences of a customer, a developer, and a tester were discussed. The observed consensus among multiple stakeholders speaks of the effectiveness of the practice in the given context.","cites":"7","conferencePercentile":"70.58823529"},{"venue":"XP","id":"ba255df2c4f071a58880a4282bdf506e0a4e1a3b","venue_1":"XP","year":"2003","title":"Tool Support for Complex Refactoring to Design Patterns","authors":"Carmen Zannier, Frank Maurer","author_ids":"2339906, 1736996","abstract":"The abstract should summarize the contents of the paper and should Using design patterns is seen to improve the maintainability of software systems. Applying patterns often implies upfront design while agile methods rely on software architecture to emerge. We bridge this gap by applying complex refactoring towards patterns to improve software design. Complex refactorings are based on existing tool-supported refactorings, knowledge of the application to be changed, knowledge of design patterns, and the capability to generate necessary code for a given design pattern. We present complex refactorings to J2EE design patterns and describe requirements of complex refactoring and accompanying tool support.","cites":"7","conferencePercentile":"52.17391304"},{"venue":"XP","id":"d7bd5da27616ea259a32aca39f5f0482b06918f2","venue_1":"XP","year":"2003","title":"Being Jane Malkovich: A Look Into the World of an XP Customer","authors":"Angela Martin, James Noble, Robert Biddle","author_ids":"7304637, 1747596, 1738737","abstract":"One of the pivotal roles in XP is the customer, but little guidance is provided in the literature on the practicalities of succeeding in this role. We used an interpretative in-depth case study to explore a successful XP project. We obtained multiple perspectives on the implementation of the customer role, and this paper includes excerpts from interviews with the customer and other development team members. We found that the interviewees provided a consistent picture of the XP customer role and they agreed that the XP customer role, especially for larger organisations, is very demanding. It requires preparation, skills, attention to detail, and the ability to make critical decisions.","cites":"19","conferencePercentile":"91.30434783"},{"venue":"XP","id":"57f53b9307a83a58a7e956e24f26f532705710c1","venue_1":"XP","year":"2010","title":"Towards Understanding Communication Structure in Pair Programming","authors":"Kai Stapel, Eric Knauss, Kurt Schneider, Matthias Becker","author_ids":"1808155, 1799726, 1724127, 3565697","abstract":"Pair Programming has often been reported to be beneficial in software projects. To better understand where these benefits come from we evaluate the aspect of intra-pair communication. Under the assumption that the benefits stem from the information being exchanged, it is important to analyze the types of information being communicated. Based on the Goal Question Metric method we derive a set of relevant metrics and apply them in an eXtreme Programming class room project. Data covering a total of 22.9 hours of intra-pair communication was collected. We found that only 7% of the conversations were off-topic (e.g. private), 11% about requirements, 14% about design, and 68% about implementation details (e.g. syntax). Accordingly, a great share of the information being exchanged in Pair Programming is on a low level of abstraction. These results represent a first data point on what kind of information is communicated to what extent during Pair Programming.","cites":"6","conferencePercentile":"90.625"},{"venue":"XP","id":"e8895f23cdc2d4562680880a544c46fa0b85742d","venue_1":"XP","year":"2008","title":"APDT: An Agile Planning Tool for Digital Tabletops","authors":"Sebastian Weber, Yaser Ghanam, Xin Wang, Frank Maurer","author_ids":"8677901, 1798683, 1736408, 1736996","abstract":"This paper presents Agile Planner for Digital Tabletops (APDT) as a tool that facilitates agile planning meetings using large horizontal displays. Utilizing APDT on a reasonably sized digital tabletop allows collaborators to create, edit, move, rotate, toss and delete index cards just like they would do with paper artifacts. APDT provides a multimodal input system that supports gesture-, handwriting-and speech recognition as alternative input methodologies to conventional mouse and keyboard input.","cites":"4","conferencePercentile":"66.66666667"},{"venue":"XP","id":"30140c9e80331e5d801d1e16c439512073ca88c2","venue_1":"XP","year":"2008","title":"Multi-modal Functional Test Execution","authors":"Shelly Park, Frank Maurer","author_ids":"1807877, 1736996","abstract":"Multi-modal test execution allows execution of the same test against various layers of a software system, e.g. the GUI layer, the web service layer and the business logic layer. Multi-modal test execution helps with identifying the location of software bugs during debugging and maintenance as well as in tracking the progress of the development effort. This paper presents a method that effectively encodes multi-modal functional tests without creating large test maintenance overhead. Our approach extends the Fit table specification structure by multi-modal fixtures and presents the results of test execution in a way to help with debugging and progress reporting.","cites":"2","conferencePercentile":"25"},{"venue":"XP","id":"afe98bcaf93978eca3ef918dc824441e789e7b44","venue_1":"XP","year":"2007","title":"A Case Study of the Implementation of Agile Methods in a Bioinformatics Project","authors":"Xueling Shu, Andrei L. Turinsky, Christoph W. Sensen, Frank Maurer","author_ids":"1933310, 1697645, 1689678, 1736996","abstract":"From July 2005 to August 2006, a bioinformatics project experienced a substantial transformation by adopting Scrum and some XP practices. The paper reveals project risks, previous challenges faced by the team and results from this one-year exploratory case study. The paper presents a discussion of the lessons learned from the perspective of both the project manager and the on-site agile advisor, and recommendations on speeding up the adoption process for other projects.","cites":"0","conferencePercentile":"14.70588235"},{"venue":"XP","id":"a56d1eef179f34c84f3387cceb66b9767ea6a342","venue_1":"XP","year":"2007","title":"Comparing Decision Making in Agile and Non-agile Software Organizations","authors":"Carmen Zannier, Frank Maurer","author_ids":"2339906, 1736996","abstract":"Our ability to improve decision making in software development hinges on understanding how decisions are made, and which approaches to decision making are better than others. However, as of yet there are few studies examining how software developers make decisions in software design, especially studies that place agile approaches in the context of decision making. In this paper, we present results of a multi-case study of design decision making in three software organizations of varying levels of agility. We show an agile organization produced a culture that supported communication and debate about alternatives to design decision more than 2 organizations of lesser agility.","cites":"6","conferencePercentile":"61.76470588"},{"venue":"XP","id":"f143b39c5d4d6f6a2afbcbb0a25589284d1372a8","venue_1":"XP","year":"2007","title":"Motivation and Cohesion in Agile Teams","authors":"Elizabeth Whitworth, Robert Biddle","author_ids":"3269889, 1738737","abstract":"This research explored aspects of agile teamwork initiatives associated with positive socio-psychological phenomena, with a focus on phenomena outside the scope of traditional management, organizational, and software engineering research. Agile teams were viewed as complex adaptive socio-technical systems. Qualitative grounded theory was used to explore the socio-psychological characteristics of agile teams under the umbrella research question: What is the experience of being in an agile software development team? Results included a deeper understanding of the link between agile practices and positive team outcomes such as motivation and cohesion.","cites":"9","conferencePercentile":"76.47058824"},{"venue":"XP","id":"295215ef419ba089727e1545643d2b9eb916603e","venue_1":"XP","year":"2014","title":"The Theory and Practice of Randori Coding Dojos","authors":"John Rooksby, Johanna Hunt, Xiaofeng Wang","author_ids":"2609254, 2648796, 1739993","abstract":"The coding dojo is a technique for continuous learning and training. Randori is one implementation format. Even though experience and lessons learnt on how coding dojos could be better organized have been reported in agile literature, the theoretical bases behind it have never been investigated. In this paper we propose to use reflective practice as a sense-making device to underpin the investigation and improvement of coding dojo for effective learning. Based on the examination of two dojo sessions we argue that the insights from the reflective practice and related theories can open new and interesting inquiries on coding dojo, and eventually help to better understand the dynamics of coding dojo, and improve the dojo practice accordingly.","cites":"2","conferencePercentile":"16.66666667"},{"venue":"XP","id":"5c72bf875f509ca90c9bbde0f1754d90e1d7f090","venue_1":"XP","year":"2005","title":"Social Perspective of Software Development Methods: The Case of the Prisoner Dilemma and Extreme Programming","authors":"Orit Hazzan, Yael Dubinsky","author_ids":"1738207, 1772317","abstract":"One of the main dilemmas with which software development teams face is how to choose a software development method that suits the team as well as the organization. This article suggests a theory that may help in this process. Specifically, Extreme Programming (XP) is analyzed within the well known framework of the prisoner dilemma. We suggest that such an analysis may explain in what situations XP may fit for implementation and, when it is used, the way it may support software development processes.","cites":"5","conferencePercentile":"65"},{"venue":"XP","id":"92f8d0604364d839edd0be213efa2d625c908d62","venue_1":"XP","year":"2005","title":"Examining Usage Patterns of the FIT Acceptance Testing Framework","authors":"Kris Read, Grigori Melnik, Frank Maurer","author_ids":"2749643, 1702764, 1736996","abstract":"Executable acceptance testing allows both to specify customers' expectations in the form of the tests and to compare those to actual results that the software produces. The results of an observational study identifying patterns in the use of the FIT acceptance testing framework are presented and the data on acceptance-test driven design is discussed.","cites":"9","conferencePercentile":"85"},{"venue":"XP","id":"62c13ae550a128bfa80f4cc67baf8efe5df02b85","venue_1":"XP","year":"2008","title":"An Observational Study of a Distributed Card Based Planning Environment","authors":"Robert Morgan, Frank Maurer, Mike Chiasson","author_ids":"3789423, 1736996, 2876432","abstract":"Providing support for distributed agile teams as they conduct planning meetings is tricky. In distributed settings, the use of paper index cards for planning isn't convenient, as some of the team members do not have access to the physical cards. We present the results of an observational study where a distributed card based planning tool was evaluated against planning with physical cards. The feedback we received from the participants was encouraging. Results indicated that teams were excited to use the tool in part because telepointers made knowledge of the other participants actions easier. We also found that communication was improved as the tool kept teams interested in the meeting and conversations on topic.","cites":"3","conferencePercentile":"45.83333333"},{"venue":"XP","id":"8d6e8e5d3c2a81acd25758c43b7dd224c4f94450","venue_1":"XP","year":"2006","title":"Foundations of Agile Decision Making from Agile Mentors and Developers","authors":"Carmen Zannier, Frank Maurer","author_ids":"2339906, 1736996","abstract":"There are few studies of how software developers make decisions in software design and none that places agile in the context of these decision making processes. In this paper, we present results of interviewing agile software developers and mentors to determine how design decision making aligns with rational decision making or naturalistic decision making. We present results of twelve case studies evaluating how agile professionals make design decisions, comparing mentor perspectives to developer perspectives. We describe our interview technique, content analysis used to analyze interview transcripts, and the interpretation of our results, to answer the question: how do agile designers make design decisions? Our results show that naturalistic decision making dominates design decision making but is supported by rational decision making .","cites":"6","conferencePercentile":"75"}]}