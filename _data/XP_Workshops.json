{"XP_Workshops.csv":[{"venue":"XP Workshops","id":"e48bfb1c58d265b839e4fa73575041931cbee6b4","venue_1":"XP Workshops","year":"2016","title":"Inter-team coordination in large-scale agile development: A test of organizational discontinuity theory","authors":"Kevin Crowston, Katherine M. Chudoba, Mary Beth Watson-Manheim, Pouya Rahmati","author_ids":"1716974, 1743509, 1687305, 3463842","abstract":"We draw on Organizational Discontinuity Theory (ODT) to identify factors that increase communication and coordination problems between teams working on large software development projects. ODT posits that faced with a disruption in the expected flow of communication, called a discontinuity, individuals must make sense of the disruption to address the problem. They may be motivated to pay more attention to the situation and consider alternative actions to deal with the discontinuity, leading to the emergence of continuities, which are new behaviors, group practices and expectations. Continuities reduce or eliminate the attention and effort required to understand and manage the situation associated with problematic discontinuities. We propose a mixed-method study based on this model to examine the effects of discontinuities and the development of continuities on inter-team coordination in large-scale agile software development.","cites":"0","conferencePercentile":"47.82608696"},{"venue":"XP Workshops","id":"0205e71e10854adb8bbde1458dcc51369f68a8e3","venue_1":"XP Workshops","year":"2016","title":"Scaling Across Knowledge Boundaries: A Case Study Of A Large-Scale Agile Software Development Project","authors":"Knut H. Rolland","author_ids":"2055798","abstract":"While, in practice, agile methods are increasingly used across large and distributed projects, the general applicability in large-scale development projects is still contested. Currently, there are only a few empirical studies of agile in the large, and especially accounts on how scaling is performed in practice are scarce. This paper aims at closing this gap by reporting from a case study of a large-scale agile effort in a highly prestigious IT-project in a Governmental organization in Norway. Theoretically, the paper draws from insights from studies of product innovation, and conceptualizes scaling in large-scale agile projects as a continuous process that involves establishing practices and artifacts for communicating and sharing across 'knowledge boundaries'. Empirically, the paper contributes by illustrating how scaling is made possible and performed through a wide-range of novel practices and artifacts that emerge over time. We illustrate how these practices, roles and artifacts establish ways of transferring, translating and transforming knowledge across different teams and between different stakeholders. Our analysis shows that these practices challenge a widespread dichotomy between agile methods as being 'flexible' on one hand, and traditional methods being 'rigid' on the other hand. Instead, the tailored practices in the case both added structure and flexibility at different stages in the process.","cites":"1","conferencePercentile":"97.82608696"},{"venue":"XP Workshops","id":"40f886f5d152fa826ee5815c09f35c805daa4210","venue_1":"XP Workshops","year":"2015","title":"Desperately' seeking research on agile requirements in the context of large-scale agile projects","authors":"Knut H. Rolland","author_ids":"2055798","abstract":"In this paper, I propose an agenda for undertaking research on requirements engineering in the context of large-scale agile software development projects. In so doing, I draw from my own experience as a practitioner in large-scale agile software development projects, as well as a review of relevant literature. Based on this, the paper reflects on two central questions: what are the main challenges related to requirements in large-scale agile software development? And, what are the relevant themes for researching requirements in large-scale agile projects? The paper concludes by proposing some overall research questions for future research.","cites":"0","conferencePercentile":"40.90909091"},{"venue":"XP Workshops","id":"c4445214060bdcf01033ba7eec55933b548ad608","venue_1":"XP Workshops","year":"2016","title":"Towards Agile Testing for Railway Safety-critical Software","authors":"Nan Li, Jin Guo, Jeff Lei, Yao Li, Chang Rao, YaXin Cao","author_ids":"1736069, 2400682, 2018638, 1802528, 3462730, 3463929","abstract":"EN 50128 gives a general guidance for testing railway safety-critical software. However, it does not specify how to test safety-critical software in an agile development environment. Based on our observation, agile software development has not been applied to the development of the Chinese Train Control System (CTCS). Previous research focused on agile methods for managing and planning safety-critical software development. There exists little research about agile testing for developing railway safety-critical software in the literature.\n In this paper, we identify several major shortcomings of the existing practice of testing railway safety-critical software in China. In particular, we find out, that Continuous Integration (CI) and Continuous Delivery (CD) are missing from the current practice of agile testing. Furthermore, effective techniques and tools are lacking for CTCS. To address these shortcomings, we propose an agile testing framework for developing railway safety-critical software. In this framework, a build automation tool manages source code, unit tests, integration tests, resources and other tools. This test framework supports CI and CD, making agile testing possible. In addition, it includes effective unit and integration testing tools that allow rigorous tests to be generated. We believe this test framework will not only be applied to railway software, but also used for other safety-critical software.","cites":"0","conferencePercentile":"47.82608696"},{"venue":"XP Workshops","id":"cbd9dc7a4a39d6742a6471203b4e13ba40a0b7ee","venue_1":"XP Workshops","year":"2016","title":"Exploring Peopleware in Continuous Delivery","authors":"Pauli Kärpänoja, Antti Virtanen, Timo Lehtonen, Tommi Mikkonen","author_ids":"3464311, 3462722, 2164636, 1764720","abstract":"Traditionally, releasing new software has been a fragile and painful procedure. This view has been challenged by a new approach to software deployment, where the goal is to always be able to deploy the system. The transition from manual releases to instant deployments requires a high degree of automation. Furthermore, the transition requires a new mindset, where both developers and operators act together to deliver value to end users. As this process involves humans and cooperation, developers and their attitude towards the new way of working is important. To this end, in this paper we study the developer perspective of applying continuous delivery in the light of interviewing practitioners working for projects where continuous delivery practices are applied. More precisely, we place the focus on how continuous delivery practices affect software developers and what are the prerequisites for achieving continuous delivery. Based on our research, higher quality and other benefits of continuous delivery can be achieved by giving developers more responsibility. Still, the added responsibilities do not necessarily increase stress, but can actually decrease it, and at the same time improve motivation and job satisfaction.","cites":"0","conferencePercentile":"47.82608696"}]}